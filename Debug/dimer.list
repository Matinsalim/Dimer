
dimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f70  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003030  08003030  00004030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003060  08003060  0000501c  2**0
                  CONTENTS
  4 .ARM          00000000  08003060  08003060  0000501c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003060  08003060  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003060  08003060  00004060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003064  08003064  00004064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08003068  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000001c  08003084  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08003084  00005118  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009936  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b4f  00000000  00000000  0000e97a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  000104d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000848  00000000  00000000  00010f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f6c6  00000000  00000000  000117c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7a8  00000000  00000000  00020e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ef3a  00000000  00000000  0002d62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008c568  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002608  00000000  00000000  0008c5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0008ebb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003018 	.word	0x08003018

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08003018 	.word	0x08003018

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <MAP>:
uint16_t adc_Data[2];//adc_data[0] = Turn on and off delay & adc_data[1] = brightness



uint32_t MAP(uint16_t au32_IN, uint16_t au32_INmin, uint16_t au32_INmax, uint16_t au32_OUTmin, uint16_t au32_OUTmax)
{
 80003f4:	b5b0      	push	{r4, r5, r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	0005      	movs	r5, r0
 80003fc:	000c      	movs	r4, r1
 80003fe:	0010      	movs	r0, r2
 8000400:	0019      	movs	r1, r3
 8000402:	1dbb      	adds	r3, r7, #6
 8000404:	1c2a      	adds	r2, r5, #0
 8000406:	801a      	strh	r2, [r3, #0]
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	1c22      	adds	r2, r4, #0
 800040c:	801a      	strh	r2, [r3, #0]
 800040e:	1cbb      	adds	r3, r7, #2
 8000410:	1c02      	adds	r2, r0, #0
 8000412:	801a      	strh	r2, [r3, #0]
 8000414:	003b      	movs	r3, r7
 8000416:	1c0a      	adds	r2, r1, #0
 8000418:	801a      	strh	r2, [r3, #0]
	return ((((au32_IN - au32_INmin)*(au32_OUTmax - au32_OUTmin))/(au32_INmax - au32_INmin)) + au32_OUTmin);
 800041a:	1dbb      	adds	r3, r7, #6
 800041c:	881a      	ldrh	r2, [r3, #0]
 800041e:	1d3b      	adds	r3, r7, #4
 8000420:	881b      	ldrh	r3, [r3, #0]
 8000422:	1ad2      	subs	r2, r2, r3
 8000424:	2318      	movs	r3, #24
 8000426:	18fb      	adds	r3, r7, r3
 8000428:	8819      	ldrh	r1, [r3, #0]
 800042a:	003b      	movs	r3, r7
 800042c:	881b      	ldrh	r3, [r3, #0]
 800042e:	1acb      	subs	r3, r1, r3
 8000430:	4353      	muls	r3, r2
 8000432:	0018      	movs	r0, r3
 8000434:	1cbb      	adds	r3, r7, #2
 8000436:	881a      	ldrh	r2, [r3, #0]
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	881b      	ldrh	r3, [r3, #0]
 800043c:	1ad3      	subs	r3, r2, r3
 800043e:	0019      	movs	r1, r3
 8000440:	f7ff feec 	bl	800021c <__divsi3>
 8000444:	0003      	movs	r3, r0
 8000446:	001a      	movs	r2, r3
 8000448:	003b      	movs	r3, r7
 800044a:	881b      	ldrh	r3, [r3, #0]
 800044c:	18d3      	adds	r3, r2, r3
}
 800044e:	0018      	movs	r0, r3
 8000450:	46bd      	mov	sp, r7
 8000452:	b002      	add	sp, #8
 8000454:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000458 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000458:	b590      	push	{r4, r7, lr}
 800045a:	b085      	sub	sp, #20
 800045c:	af02      	add	r7, sp, #8
 800045e:	0002      	movs	r2, r0
 8000460:	1dbb      	adds	r3, r7, #6
 8000462:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == ZeroCross_Pin)
 8000464:	1dbb      	adds	r3, r7, #6
 8000466:	881b      	ldrh	r3, [r3, #0]
 8000468:	2b40      	cmp	r3, #64	@ 0x40
 800046a:	d107      	bne.n	800047c <HAL_GPIO_EXTI_Callback+0x24>
	{
		htim1.Instance->CNT=0;
 800046c:	4b19      	ldr	r3, [pc, #100]	@ (80004d4 <HAL_GPIO_EXTI_Callback+0x7c>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2200      	movs	r2, #0
 8000472:	625a      	str	r2, [r3, #36]	@ 0x24
		interrupt_Counter=0;
 8000474:	4b18      	ldr	r3, [pc, #96]	@ (80004d8 <HAL_GPIO_EXTI_Callback+0x80>)
 8000476:	2200      	movs	r2, #0
 8000478:	701a      	strb	r2, [r3, #0]
 800047a:	e014      	b.n	80004a6 <HAL_GPIO_EXTI_Callback+0x4e>
	}
	else  if(GPIO_Pin == Pir_Pin)//Sensor status
 800047c:	1dbb      	adds	r3, r7, #6
 800047e:	881b      	ldrh	r3, [r3, #0]
 8000480:	2b80      	cmp	r3, #128	@ 0x80
 8000482:	d110      	bne.n	80004a6 <HAL_GPIO_EXTI_Callback+0x4e>
	{
		pir_State = !pir_State;
 8000484:	4b15      	ldr	r3, [pc, #84]	@ (80004dc <HAL_GPIO_EXTI_Callback+0x84>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	1e5a      	subs	r2, r3, #1
 800048a:	4193      	sbcs	r3, r2
 800048c:	b2db      	uxtb	r3, r3
 800048e:	2201      	movs	r2, #1
 8000490:	4053      	eors	r3, r2
 8000492:	b2db      	uxtb	r3, r3
 8000494:	1c1a      	adds	r2, r3, #0
 8000496:	2301      	movs	r3, #1
 8000498:	4013      	ands	r3, r2
 800049a:	b2da      	uxtb	r2, r3
 800049c:	4b0f      	ldr	r3, [pc, #60]	@ (80004dc <HAL_GPIO_EXTI_Callback+0x84>)
 800049e:	701a      	strb	r2, [r3, #0]
		lamp_Number=0;
 80004a0:	4b0f      	ldr	r3, [pc, #60]	@ (80004e0 <HAL_GPIO_EXTI_Callback+0x88>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	brightness_Range = MAP(adc_Data[1],min_Pot,max_Pot,min_Brightness,max_Brightness);
 80004a6:	4b0f      	ldr	r3, [pc, #60]	@ (80004e4 <HAL_GPIO_EXTI_Callback+0x8c>)
 80004a8:	8858      	ldrh	r0, [r3, #2]
 80004aa:	4b0f      	ldr	r3, [pc, #60]	@ (80004e8 <HAL_GPIO_EXTI_Callback+0x90>)
 80004ac:	8819      	ldrh	r1, [r3, #0]
 80004ae:	4b0f      	ldr	r3, [pc, #60]	@ (80004ec <HAL_GPIO_EXTI_Callback+0x94>)
 80004b0:	881a      	ldrh	r2, [r3, #0]
 80004b2:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <HAL_GPIO_EXTI_Callback+0x98>)
 80004b4:	881c      	ldrh	r4, [r3, #0]
 80004b6:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <HAL_GPIO_EXTI_Callback+0x9c>)
 80004b8:	881b      	ldrh	r3, [r3, #0]
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	0023      	movs	r3, r4
 80004be:	f7ff ff99 	bl	80003f4 <MAP>
 80004c2:	0003      	movs	r3, r0
 80004c4:	b29a      	uxth	r2, r3
 80004c6:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <HAL_GPIO_EXTI_Callback+0xa0>)
 80004c8:	801a      	strh	r2, [r3, #0]
}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b003      	add	sp, #12
 80004d0:	bd90      	pop	{r4, r7, pc}
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	200000bc 	.word	0x200000bc
 80004d8:	20000104 	.word	0x20000104
 80004dc:	20000106 	.word	0x20000106
 80004e0:	20000105 	.word	0x20000105
 80004e4:	20000110 	.word	0x20000110
 80004e8:	2000010e 	.word	0x2000010e
 80004ec:	20000004 	.word	0x20000004
 80004f0:	20000008 	.word	0x20000008
 80004f4:	20000006 	.word	0x20000006
 80004f8:	2000010c 	.word	0x2000010c

080004fc <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	if (interrupt_Counter==brightness1)
 8000504:	4b25      	ldr	r3, [pc, #148]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000506:	781a      	ldrb	r2, [r3, #0]
 8000508:	4b25      	ldr	r3, [pc, #148]	@ (80005a0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	429a      	cmp	r2, r3
 800050e:	d10d      	bne.n	800052c <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		HAL_GPIO_WritePin(DimmerSignal1_GPIO_Port,DimmerSignal1_Pin, 1);
 8000510:	2390      	movs	r3, #144	@ 0x90
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	2201      	movs	r2, #1
 8000516:	2120      	movs	r1, #32
 8000518:	0018      	movs	r0, r3
 800051a:	f001 fceb 	bl	8001ef4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DimmerSignal1_GPIO_Port,DimmerSignal1_Pin, 0);
 800051e:	2390      	movs	r3, #144	@ 0x90
 8000520:	05db      	lsls	r3, r3, #23
 8000522:	2200      	movs	r2, #0
 8000524:	2120      	movs	r1, #32
 8000526:	0018      	movs	r0, r3
 8000528:	f001 fce4 	bl	8001ef4 <HAL_GPIO_WritePin>
	}
	if (interrupt_Counter==brightness2)
 800052c:	4b1b      	ldr	r3, [pc, #108]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800052e:	781a      	ldrb	r2, [r3, #0]
 8000530:	4b1c      	ldr	r3, [pc, #112]	@ (80005a4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	429a      	cmp	r2, r3
 8000536:	d10d      	bne.n	8000554 <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		HAL_GPIO_WritePin(DimmerSignal2_GPIO_Port,DimmerSignal2_Pin, 1);
 8000538:	2390      	movs	r3, #144	@ 0x90
 800053a:	05db      	lsls	r3, r3, #23
 800053c:	2201      	movs	r2, #1
 800053e:	2110      	movs	r1, #16
 8000540:	0018      	movs	r0, r3
 8000542:	f001 fcd7 	bl	8001ef4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DimmerSignal2_GPIO_Port,DimmerSignal2_Pin, 0);
 8000546:	2390      	movs	r3, #144	@ 0x90
 8000548:	05db      	lsls	r3, r3, #23
 800054a:	2200      	movs	r2, #0
 800054c:	2110      	movs	r1, #16
 800054e:	0018      	movs	r0, r3
 8000550:	f001 fcd0 	bl	8001ef4 <HAL_GPIO_WritePin>
	}
	if (interrupt_Counter==brightness3)
 8000554:	4b11      	ldr	r3, [pc, #68]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000556:	781a      	ldrb	r2, [r3, #0]
 8000558:	4b13      	ldr	r3, [pc, #76]	@ (80005a8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	429a      	cmp	r2, r3
 800055e:	d10d      	bne.n	800057c <HAL_TIM_PeriodElapsedCallback+0x80>
	{
		HAL_GPIO_WritePin(DimmerSignal3_GPIO_Port,DimmerSignal3_Pin, 1);
 8000560:	2390      	movs	r3, #144	@ 0x90
 8000562:	05db      	lsls	r3, r3, #23
 8000564:	2201      	movs	r2, #1
 8000566:	2108      	movs	r1, #8
 8000568:	0018      	movs	r0, r3
 800056a:	f001 fcc3 	bl	8001ef4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(DimmerSignal3_GPIO_Port,DimmerSignal3_Pin, 0);
 800056e:	2390      	movs	r3, #144	@ 0x90
 8000570:	05db      	lsls	r3, r3, #23
 8000572:	2200      	movs	r2, #0
 8000574:	2108      	movs	r1, #8
 8000576:	0018      	movs	r0, r3
 8000578:	f001 fcbc 	bl	8001ef4 <HAL_GPIO_WritePin>
	}
	interrupt_Counter++;//Interrupt count
 800057c:	4b07      	ldr	r3, [pc, #28]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	3301      	adds	r3, #1
 8000582:	b2da      	uxtb	r2, r3
 8000584:	4b05      	ldr	r3, [pc, #20]	@ (800059c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000586:	701a      	strb	r2, [r3, #0]
	timer++;
 8000588:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	b29a      	uxth	r2, r3
 8000590:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000592:	801a      	strh	r2, [r3, #0]
}
 8000594:	46c0      	nop			@ (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	b002      	add	sp, #8
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000104 	.word	0x20000104
 80005a0:	20000000 	.word	0x20000000
 80005a4:	20000001 	.word	0x20000001
 80005a8:	20000002 	.word	0x20000002
 80005ac:	20000108 	.word	0x20000108

080005b0 <on>:



void on(void) //To turn on the lamp
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	if(lamp_Number==0)
 80005b4:	4b2c      	ldr	r3, [pc, #176]	@ (8000668 <on+0xb8>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d118      	bne.n	80005ee <on+0x3e>
	{
		if(brightness1>brightness_Range)//The brightness of the first lamp
 80005bc:	4b2b      	ldr	r3, [pc, #172]	@ (800066c <on+0xbc>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	001a      	movs	r2, r3
 80005c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000670 <on+0xc0>)
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	d906      	bls.n	80005d8 <on+0x28>
			brightness1--;
 80005ca:	4b28      	ldr	r3, [pc, #160]	@ (800066c <on+0xbc>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b26      	ldr	r3, [pc, #152]	@ (800066c <on+0xbc>)
 80005d4:	701a      	strb	r2, [r3, #0]
		if(brightness3>brightness_Range)//The brightness of the third lamp
			brightness3--;
		else if(brightness3<=brightness_Range)
			lamp_Number=3;
	}
}
 80005d6:	e043      	b.n	8000660 <on+0xb0>
		else if(brightness1<=brightness_Range)
 80005d8:	4b24      	ldr	r3, [pc, #144]	@ (800066c <on+0xbc>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	001a      	movs	r2, r3
 80005de:	4b24      	ldr	r3, [pc, #144]	@ (8000670 <on+0xc0>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	d83c      	bhi.n	8000660 <on+0xb0>
			lamp_Number=1;
 80005e6:	4b20      	ldr	r3, [pc, #128]	@ (8000668 <on+0xb8>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	701a      	strb	r2, [r3, #0]
}
 80005ec:	e038      	b.n	8000660 <on+0xb0>
	else if(lamp_Number==1)
 80005ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000668 <on+0xb8>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d118      	bne.n	8000628 <on+0x78>
		if(brightness2>brightness_Range)//The brightness of the second lamp
 80005f6:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <on+0xc4>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	001a      	movs	r2, r3
 80005fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <on+0xc0>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	429a      	cmp	r2, r3
 8000602:	d906      	bls.n	8000612 <on+0x62>
			brightness2--;
 8000604:	4b1b      	ldr	r3, [pc, #108]	@ (8000674 <on+0xc4>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	3b01      	subs	r3, #1
 800060a:	b2da      	uxtb	r2, r3
 800060c:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <on+0xc4>)
 800060e:	701a      	strb	r2, [r3, #0]
}
 8000610:	e026      	b.n	8000660 <on+0xb0>
		else if(brightness2<=brightness_Range)
 8000612:	4b18      	ldr	r3, [pc, #96]	@ (8000674 <on+0xc4>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	001a      	movs	r2, r3
 8000618:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <on+0xc0>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	429a      	cmp	r2, r3
 800061e:	d81f      	bhi.n	8000660 <on+0xb0>
			lamp_Number=2;
 8000620:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <on+0xb8>)
 8000622:	2202      	movs	r2, #2
 8000624:	701a      	strb	r2, [r3, #0]
}
 8000626:	e01b      	b.n	8000660 <on+0xb0>
	else if(lamp_Number==2)
 8000628:	4b0f      	ldr	r3, [pc, #60]	@ (8000668 <on+0xb8>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b02      	cmp	r3, #2
 800062e:	d117      	bne.n	8000660 <on+0xb0>
		if(brightness3>brightness_Range)//The brightness of the third lamp
 8000630:	4b11      	ldr	r3, [pc, #68]	@ (8000678 <on+0xc8>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	001a      	movs	r2, r3
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <on+0xc0>)
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	429a      	cmp	r2, r3
 800063c:	d906      	bls.n	800064c <on+0x9c>
			brightness3--;
 800063e:	4b0e      	ldr	r3, [pc, #56]	@ (8000678 <on+0xc8>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	3b01      	subs	r3, #1
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b0c      	ldr	r3, [pc, #48]	@ (8000678 <on+0xc8>)
 8000648:	701a      	strb	r2, [r3, #0]
}
 800064a:	e009      	b.n	8000660 <on+0xb0>
		else if(brightness3<=brightness_Range)
 800064c:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <on+0xc8>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	001a      	movs	r2, r3
 8000652:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <on+0xc0>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	429a      	cmp	r2, r3
 8000658:	d802      	bhi.n	8000660 <on+0xb0>
			lamp_Number=3;
 800065a:	4b03      	ldr	r3, [pc, #12]	@ (8000668 <on+0xb8>)
 800065c:	2203      	movs	r2, #3
 800065e:	701a      	strb	r2, [r3, #0]
}
 8000660:	46c0      	nop			@ (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	20000105 	.word	0x20000105
 800066c:	20000000 	.word	0x20000000
 8000670:	2000010c 	.word	0x2000010c
 8000674:	20000001 	.word	0x20000001
 8000678:	20000002 	.word	0x20000002

0800067c <off>:
void off(void)//To turn off the lamp
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
	if(lamp_Number==0)
 8000680:	4b23      	ldr	r3, [pc, #140]	@ (8000710 <off+0x94>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d112      	bne.n	80006ae <off+0x32>
	{
		if(brightness1<100)//The brightness of the first lamp
 8000688:	4b22      	ldr	r3, [pc, #136]	@ (8000714 <off+0x98>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b63      	cmp	r3, #99	@ 0x63
 800068e:	d806      	bhi.n	800069e <off+0x22>
			brightness1++;
 8000690:	4b20      	ldr	r3, [pc, #128]	@ (8000714 <off+0x98>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	b2da      	uxtb	r2, r3
 8000698:	4b1e      	ldr	r3, [pc, #120]	@ (8000714 <off+0x98>)
 800069a:	701a      	strb	r2, [r3, #0]
		if(brightness3<100)//The brightness of the third lamp
			brightness3++;
		else if(brightness3>=100)
			lamp_Number=3;
	}
}
 800069c:	e034      	b.n	8000708 <off+0x8c>
		else if(brightness1>=100)
 800069e:	4b1d      	ldr	r3, [pc, #116]	@ (8000714 <off+0x98>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b63      	cmp	r3, #99	@ 0x63
 80006a4:	d930      	bls.n	8000708 <off+0x8c>
			lamp_Number=1;
 80006a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000710 <off+0x94>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
}
 80006ac:	e02c      	b.n	8000708 <off+0x8c>
	else if(lamp_Number==1)
 80006ae:	4b18      	ldr	r3, [pc, #96]	@ (8000710 <off+0x94>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d112      	bne.n	80006dc <off+0x60>
		if(brightness2<100)//The brightness of the second lamp
 80006b6:	4b18      	ldr	r3, [pc, #96]	@ (8000718 <off+0x9c>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b63      	cmp	r3, #99	@ 0x63
 80006bc:	d806      	bhi.n	80006cc <off+0x50>
			brightness2++;
 80006be:	4b16      	ldr	r3, [pc, #88]	@ (8000718 <off+0x9c>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	3301      	adds	r3, #1
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <off+0x9c>)
 80006c8:	701a      	strb	r2, [r3, #0]
}
 80006ca:	e01d      	b.n	8000708 <off+0x8c>
		else if(brightness2>=100)
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <off+0x9c>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b63      	cmp	r3, #99	@ 0x63
 80006d2:	d919      	bls.n	8000708 <off+0x8c>
			lamp_Number=2;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <off+0x94>)
 80006d6:	2202      	movs	r2, #2
 80006d8:	701a      	strb	r2, [r3, #0]
}
 80006da:	e015      	b.n	8000708 <off+0x8c>
	else if(lamp_Number==2)
 80006dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <off+0x94>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	d111      	bne.n	8000708 <off+0x8c>
		if(brightness3<100)//The brightness of the third lamp
 80006e4:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <off+0xa0>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b63      	cmp	r3, #99	@ 0x63
 80006ea:	d806      	bhi.n	80006fa <off+0x7e>
			brightness3++;
 80006ec:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <off+0xa0>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	3301      	adds	r3, #1
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <off+0xa0>)
 80006f6:	701a      	strb	r2, [r3, #0]
}
 80006f8:	e006      	b.n	8000708 <off+0x8c>
		else if(brightness3>=100)
 80006fa:	4b08      	ldr	r3, [pc, #32]	@ (800071c <off+0xa0>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b63      	cmp	r3, #99	@ 0x63
 8000700:	d902      	bls.n	8000708 <off+0x8c>
			lamp_Number=3;
 8000702:	4b03      	ldr	r3, [pc, #12]	@ (8000710 <off+0x94>)
 8000704:	2203      	movs	r2, #3
 8000706:	701a      	strb	r2, [r3, #0]
}
 8000708:	46c0      	nop			@ (mov r8, r8)
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	46c0      	nop			@ (mov r8, r8)
 8000710:	20000105 	.word	0x20000105
 8000714:	20000000 	.word	0x20000000
 8000718:	20000001 	.word	0x20000001
 800071c:	20000002 	.word	0x20000002

08000720 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b083      	sub	sp, #12
 8000724:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000726:	f000 fb1b 	bl	8000d60 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800072a:	f000 f857 	bl	80007dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800072e:	f000 f971 	bl	8000a14 <MX_GPIO_Init>
	MX_DMA_Init();
 8000732:	f000 f951 	bl	80009d8 <MX_DMA_Init>
	MX_TIM1_Init();
 8000736:	f000 f8f9 	bl	800092c <MX_TIM1_Init>
	MX_ADC_Init();
 800073a:	f000 f88f 	bl	800085c <MX_ADC_Init>
	/* USER CODE BEGIN 2 */
	HAL_ADCEx_Calibration_Start(&hadc);
 800073e:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <main+0x94>)
 8000740:	0018      	movs	r0, r3
 8000742:	f000 ff49 	bl	80015d8 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc,(uint32_t *)adc_Data, 2);
 8000746:	491c      	ldr	r1, [pc, #112]	@ (80007b8 <main+0x98>)
 8000748:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <main+0x94>)
 800074a:	2202      	movs	r2, #2
 800074c:	0018      	movs	r0, r3
 800074e:	f000 fcab 	bl	80010a8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim1);
 8000752:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <main+0x9c>)
 8000754:	0018      	movs	r0, r3
 8000756:	f002 f895 	bl	8002884 <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		amount_of_Delay = MAP(adc_Data[0],min_Pot,max_Pot,min_Time,max_Time);
 800075a:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <main+0x98>)
 800075c:	8818      	ldrh	r0, [r3, #0]
 800075e:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <main+0xa0>)
 8000760:	8819      	ldrh	r1, [r3, #0]
 8000762:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <main+0xa4>)
 8000764:	881a      	ldrh	r2, [r3, #0]
 8000766:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <main+0xa8>)
 8000768:	881c      	ldrh	r4, [r3, #0]
 800076a:	4b18      	ldr	r3, [pc, #96]	@ (80007cc <main+0xac>)
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	0023      	movs	r3, r4
 8000772:	f7ff fe3f 	bl	80003f4 <MAP>
 8000776:	0003      	movs	r3, r0
 8000778:	b29a      	uxth	r2, r3
 800077a:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <main+0xb0>)
 800077c:	801a      	strh	r2, [r3, #0]

		if(timer>=amount_of_Delay)//To control the lighting time of the lamp
 800077e:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <main+0xb4>)
 8000780:	881a      	ldrh	r2, [r3, #0]
 8000782:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <main+0xb0>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	429a      	cmp	r2, r3
 8000788:	d3e7      	bcc.n	800075a <main+0x3a>
		{
			if(pir_State)
 800078a:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <main+0xb8>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d002      	beq.n	8000798 <main+0x78>
				on();
 8000792:	f7ff ff0d 	bl	80005b0 <on>
 8000796:	e008      	b.n	80007aa <main+0x8a>
			else if(!pir_State)
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <main+0xb8>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2201      	movs	r2, #1
 800079e:	4053      	eors	r3, r2
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <main+0x8a>
				off();
 80007a6:	f7ff ff69 	bl	800067c <off>

			timer=0;
 80007aa:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <main+0xb4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	801a      	strh	r2, [r3, #0]
		amount_of_Delay = MAP(adc_Data[0],min_Pot,max_Pot,min_Time,max_Time);
 80007b0:	e7d3      	b.n	800075a <main+0x3a>
 80007b2:	46c0      	nop			@ (mov r8, r8)
 80007b4:	20000038 	.word	0x20000038
 80007b8:	20000110 	.word	0x20000110
 80007bc:	200000bc 	.word	0x200000bc
 80007c0:	2000010e 	.word	0x2000010e
 80007c4:	20000004 	.word	0x20000004
 80007c8:	2000000c 	.word	0x2000000c
 80007cc:	2000000a 	.word	0x2000000a
 80007d0:	2000010a 	.word	0x2000010a
 80007d4:	20000108 	.word	0x20000108
 80007d8:	20000106 	.word	0x20000106

080007dc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007dc:	b590      	push	{r4, r7, lr}
 80007de:	b091      	sub	sp, #68	@ 0x44
 80007e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e2:	2410      	movs	r4, #16
 80007e4:	193b      	adds	r3, r7, r4
 80007e6:	0018      	movs	r0, r3
 80007e8:	2330      	movs	r3, #48	@ 0x30
 80007ea:	001a      	movs	r2, r3
 80007ec:	2100      	movs	r1, #0
 80007ee:	f002 fbe7 	bl	8002fc0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f2:	003b      	movs	r3, r7
 80007f4:	0018      	movs	r0, r3
 80007f6:	2310      	movs	r3, #16
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f002 fbe0 	bl	8002fc0 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000800:	0021      	movs	r1, r4
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2202      	movs	r2, #2
 8000806:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2201      	movs	r2, #1
 800080c:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2210      	movs	r2, #16
 8000812:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2200      	movs	r2, #0
 8000818:	621a      	str	r2, [r3, #32]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081a:	187b      	adds	r3, r7, r1
 800081c:	0018      	movs	r0, r3
 800081e:	f001 fba3 	bl	8001f68 <HAL_RCC_OscConfig>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x4e>
	{
		Error_Handler();
 8000826:	f000 f957 	bl	8000ad8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	003b      	movs	r3, r7
 800082c:	2207      	movs	r2, #7
 800082e:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000830:	003b      	movs	r3, r7
 8000832:	2200      	movs	r2, #0
 8000834:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000836:	003b      	movs	r3, r7
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083c:	003b      	movs	r3, r7
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000842:	003b      	movs	r3, r7
 8000844:	2100      	movs	r1, #0
 8000846:	0018      	movs	r0, r3
 8000848:	f001 fea8 	bl	800259c <HAL_RCC_ClockConfig>
 800084c:	1e03      	subs	r3, r0, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x78>
	{
		Error_Handler();
 8000850:	f000 f942 	bl	8000ad8 <Error_Handler>
	}
}
 8000854:	46c0      	nop			@ (mov r8, r8)
 8000856:	46bd      	mov	sp, r7
 8000858:	b011      	add	sp, #68	@ 0x44
 800085a:	bd90      	pop	{r4, r7, pc}

0800085c <MX_ADC_Init>:
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	0018      	movs	r0, r3
 8000866:	230c      	movs	r3, #12
 8000868:	001a      	movs	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	f002 fba8 	bl	8002fc0 <memset>

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8000870:	4b2c      	ldr	r3, [pc, #176]	@ (8000924 <MX_ADC_Init+0xc8>)
 8000872:	4a2d      	ldr	r2, [pc, #180]	@ (8000928 <MX_ADC_Init+0xcc>)
 8000874:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000876:	4b2b      	ldr	r3, [pc, #172]	@ (8000924 <MX_ADC_Init+0xc8>)
 8000878:	2280      	movs	r2, #128	@ 0x80
 800087a:	0612      	lsls	r2, r2, #24
 800087c:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800087e:	4b29      	ldr	r3, [pc, #164]	@ (8000924 <MX_ADC_Init+0xc8>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000884:	4b27      	ldr	r3, [pc, #156]	@ (8000924 <MX_ADC_Init+0xc8>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800088a:	4b26      	ldr	r3, [pc, #152]	@ (8000924 <MX_ADC_Init+0xc8>)
 800088c:	2201      	movs	r2, #1
 800088e:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000890:	4b24      	ldr	r3, [pc, #144]	@ (8000924 <MX_ADC_Init+0xc8>)
 8000892:	2204      	movs	r2, #4
 8000894:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8000896:	4b23      	ldr	r3, [pc, #140]	@ (8000924 <MX_ADC_Init+0xc8>)
 8000898:	2200      	movs	r2, #0
 800089a:	761a      	strb	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800089c:	4b21      	ldr	r3, [pc, #132]	@ (8000924 <MX_ADC_Init+0xc8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	765a      	strb	r2, [r3, #25]
	hadc.Init.ContinuousConvMode = ENABLE;
 80008a2:	4b20      	ldr	r3, [pc, #128]	@ (8000924 <MX_ADC_Init+0xc8>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	769a      	strb	r2, [r3, #26]
	hadc.Init.DiscontinuousConvMode = DISABLE;
 80008a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000924 <MX_ADC_Init+0xc8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	76da      	strb	r2, [r3, #27]
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000924 <MX_ADC_Init+0xc8>)
 80008b0:	22c2      	movs	r2, #194	@ 0xc2
 80008b2:	32ff      	adds	r2, #255	@ 0xff
 80008b4:	61da      	str	r2, [r3, #28]
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000924 <MX_ADC_Init+0xc8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	621a      	str	r2, [r3, #32]
	hadc.Init.DMAContinuousRequests = ENABLE;
 80008bc:	4b19      	ldr	r3, [pc, #100]	@ (8000924 <MX_ADC_Init+0xc8>)
 80008be:	2224      	movs	r2, #36	@ 0x24
 80008c0:	2101      	movs	r1, #1
 80008c2:	5499      	strb	r1, [r3, r2]
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008c4:	4b17      	ldr	r3, [pc, #92]	@ (8000924 <MX_ADC_Init+0xc8>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_ADC_Init(&hadc) != HAL_OK)
 80008ca:	4b16      	ldr	r3, [pc, #88]	@ (8000924 <MX_ADC_Init+0xc8>)
 80008cc:	0018      	movs	r0, r3
 80008ce:	f000 faab 	bl	8000e28 <HAL_ADC_Init>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC_Init+0x7e>
	{
		Error_Handler();
 80008d6:	f000 f8ff 	bl	8000ad8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	2280      	movs	r2, #128	@ 0x80
 80008e4:	0152      	lsls	r2, r2, #5
 80008e6:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2207      	movs	r2, #7
 80008ec:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008ee:	1d3a      	adds	r2, r7, #4
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <MX_ADC_Init+0xc8>)
 80008f2:	0011      	movs	r1, r2
 80008f4:	0018      	movs	r0, r3
 80008f6:	f000 fc71 	bl	80011dc <HAL_ADC_ConfigChannel>
 80008fa:	1e03      	subs	r3, r0, #0
 80008fc:	d001      	beq.n	8000902 <MX_ADC_Init+0xa6>
	{
		Error_Handler();
 80008fe:	f000 f8eb 	bl	8000ad8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2201      	movs	r2, #1
 8000906:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000908:	1d3a      	adds	r2, r7, #4
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <MX_ADC_Init+0xc8>)
 800090c:	0011      	movs	r1, r2
 800090e:	0018      	movs	r0, r3
 8000910:	f000 fc64 	bl	80011dc <HAL_ADC_ConfigChannel>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d001      	beq.n	800091c <MX_ADC_Init+0xc0>
	{
		Error_Handler();
 8000918:	f000 f8de 	bl	8000ad8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 800091c:	46c0      	nop			@ (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	b004      	add	sp, #16
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000038 	.word	0x20000038
 8000928:	40012400 	.word	0x40012400

0800092c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b086      	sub	sp, #24
 8000930:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000932:	2308      	movs	r3, #8
 8000934:	18fb      	adds	r3, r7, r3
 8000936:	0018      	movs	r0, r3
 8000938:	2310      	movs	r3, #16
 800093a:	001a      	movs	r2, r3
 800093c:	2100      	movs	r1, #0
 800093e:	f002 fb3f 	bl	8002fc0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000942:	003b      	movs	r3, r7
 8000944:	0018      	movs	r0, r3
 8000946:	2308      	movs	r3, #8
 8000948:	001a      	movs	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	f002 fb38 	bl	8002fc0 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000950:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <MX_TIM1_Init+0xa4>)
 8000952:	4a20      	ldr	r2, [pc, #128]	@ (80009d4 <MX_TIM1_Init+0xa8>)
 8000954:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 7;
 8000956:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <MX_TIM1_Init+0xa4>)
 8000958:	2207      	movs	r2, #7
 800095a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800095c:	4b1c      	ldr	r3, [pc, #112]	@ (80009d0 <MX_TIM1_Init+0xa4>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 99;
 8000962:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <MX_TIM1_Init+0xa4>)
 8000964:	2263      	movs	r2, #99	@ 0x63
 8000966:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000968:	4b19      	ldr	r3, [pc, #100]	@ (80009d0 <MX_TIM1_Init+0xa4>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800096e:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <MX_TIM1_Init+0xa4>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000974:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <MX_TIM1_Init+0xa4>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <MX_TIM1_Init+0xa4>)
 800097c:	0018      	movs	r0, r3
 800097e:	f001 ff31 	bl	80027e4 <HAL_TIM_Base_Init>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <MX_TIM1_Init+0x5e>
	{
		Error_Handler();
 8000986:	f000 f8a7 	bl	8000ad8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800098a:	2108      	movs	r1, #8
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2280      	movs	r2, #128	@ 0x80
 8000990:	0152      	lsls	r2, r2, #5
 8000992:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000994:	187a      	adds	r2, r7, r1
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <MX_TIM1_Init+0xa4>)
 8000998:	0011      	movs	r1, r2
 800099a:	0018      	movs	r0, r3
 800099c:	f002 f8a6 	bl	8002aec <HAL_TIM_ConfigClockSource>
 80009a0:	1e03      	subs	r3, r0, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM1_Init+0x7c>
	{
		Error_Handler();
 80009a4:	f000 f898 	bl	8000ad8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a8:	003b      	movs	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ae:	003b      	movs	r3, r7
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009b4:	003a      	movs	r2, r7
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <MX_TIM1_Init+0xa4>)
 80009b8:	0011      	movs	r1, r2
 80009ba:	0018      	movs	r0, r3
 80009bc:	f002 fa9e 	bl	8002efc <HAL_TIMEx_MasterConfigSynchronization>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM1_Init+0x9c>
	{
		Error_Handler();
 80009c4:	f000 f888 	bl	8000ad8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80009c8:	46c0      	nop			@ (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b006      	add	sp, #24
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200000bc 	.word	0x200000bc
 80009d4:	40012c00 	.word	0x40012c00

080009d8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80009de:	4b0c      	ldr	r3, [pc, #48]	@ (8000a10 <MX_DMA_Init+0x38>)
 80009e0:	695a      	ldr	r2, [r3, #20]
 80009e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <MX_DMA_Init+0x38>)
 80009e4:	2101      	movs	r1, #1
 80009e6:	430a      	orrs	r2, r1
 80009e8:	615a      	str	r2, [r3, #20]
 80009ea:	4b09      	ldr	r3, [pc, #36]	@ (8000a10 <MX_DMA_Init+0x38>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	2201      	movs	r2, #1
 80009f0:	4013      	ands	r3, r2
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2100      	movs	r1, #0
 80009fa:	2009      	movs	r0, #9
 80009fc:	f000 ff40 	bl	8001880 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a00:	2009      	movs	r0, #9
 8000a02:	f000 ff52 	bl	80018aa <HAL_NVIC_EnableIRQ>

}
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b002      	add	sp, #8
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	40021000 	.word	0x40021000

08000a14 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	2314      	movs	r3, #20
 8000a20:	001a      	movs	r2, r3
 8000a22:	2100      	movs	r1, #0
 8000a24:	f002 facc 	bl	8002fc0 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad4 <MX_GPIO_Init+0xc0>)
 8000a2a:	695a      	ldr	r2, [r3, #20]
 8000a2c:	4b29      	ldr	r3, [pc, #164]	@ (8000ad4 <MX_GPIO_Init+0xc0>)
 8000a2e:	2180      	movs	r1, #128	@ 0x80
 8000a30:	0289      	lsls	r1, r1, #10
 8000a32:	430a      	orrs	r2, r1
 8000a34:	615a      	str	r2, [r3, #20]
 8000a36:	4b27      	ldr	r3, [pc, #156]	@ (8000ad4 <MX_GPIO_Init+0xc0>)
 8000a38:	695a      	ldr	r2, [r3, #20]
 8000a3a:	2380      	movs	r3, #128	@ 0x80
 8000a3c:	029b      	lsls	r3, r3, #10
 8000a3e:	4013      	ands	r3, r2
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED_Pin|DimmerSignal3_Pin|DimmerSignal2_Pin|DimmerSignal1_Pin, GPIO_PIN_RESET);
 8000a44:	2390      	movs	r3, #144	@ 0x90
 8000a46:	05db      	lsls	r3, r3, #23
 8000a48:	2200      	movs	r2, #0
 8000a4a:	213c      	movs	r1, #60	@ 0x3c
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f001 fa51 	bl	8001ef4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED_Pin DimmerSignal3_Pin DimmerSignal2_Pin DimmerSignal1_Pin */
	GPIO_InitStruct.Pin = LED_Pin|DimmerSignal3_Pin|DimmerSignal2_Pin|DimmerSignal1_Pin;
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	223c      	movs	r2, #60	@ 0x3c
 8000a56:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a58:	1d3b      	adds	r3, r7, #4
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	1d3a      	adds	r2, r7, #4
 8000a6c:	2390      	movs	r3, #144	@ 0x90
 8000a6e:	05db      	lsls	r3, r3, #23
 8000a70:	0011      	movs	r1, r2
 8000a72:	0018      	movs	r0, r3
 8000a74:	f001 f8ce 	bl	8001c14 <HAL_GPIO_Init>

	/*Configure GPIO pin : ZeroCross_Pin */
	GPIO_InitStruct.Pin = ZeroCross_Pin;
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	2240      	movs	r2, #64	@ 0x40
 8000a7c:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	2288      	movs	r2, #136	@ 0x88
 8000a82:	0352      	lsls	r2, r2, #13
 8000a84:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(ZeroCross_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	1d3a      	adds	r2, r7, #4
 8000a8e:	2390      	movs	r3, #144	@ 0x90
 8000a90:	05db      	lsls	r3, r3, #23
 8000a92:	0011      	movs	r1, r2
 8000a94:	0018      	movs	r0, r3
 8000a96:	f001 f8bd 	bl	8001c14 <HAL_GPIO_Init>

	/*Configure GPIO pin : Pir_Pin */
	GPIO_InitStruct.Pin = Pir_Pin;
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2280      	movs	r2, #128	@ 0x80
 8000a9e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	22c4      	movs	r2, #196	@ 0xc4
 8000aa4:	0392      	lsls	r2, r2, #14
 8000aa6:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	2202      	movs	r2, #2
 8000aac:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(Pir_GPIO_Port, &GPIO_InitStruct);
 8000aae:	1d3a      	adds	r2, r7, #4
 8000ab0:	2390      	movs	r3, #144	@ 0x90
 8000ab2:	05db      	lsls	r3, r3, #23
 8000ab4:	0011      	movs	r1, r2
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f001 f8ac 	bl	8001c14 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2007      	movs	r0, #7
 8000ac2:	f000 fedd 	bl	8001880 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000ac6:	2007      	movs	r0, #7
 8000ac8:	f000 feef 	bl	80018aa <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b006      	add	sp, #24
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000adc:	b672      	cpsid	i
}
 8000ade:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ae0:	46c0      	nop			@ (mov r8, r8)
 8000ae2:	e7fd      	b.n	8000ae0 <Error_Handler+0x8>

08000ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <HAL_MspInit+0x44>)
 8000aec:	699a      	ldr	r2, [r3, #24]
 8000aee:	4b0e      	ldr	r3, [pc, #56]	@ (8000b28 <HAL_MspInit+0x44>)
 8000af0:	2101      	movs	r1, #1
 8000af2:	430a      	orrs	r2, r1
 8000af4:	619a      	str	r2, [r3, #24]
 8000af6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <HAL_MspInit+0x44>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	2201      	movs	r2, #1
 8000afc:	4013      	ands	r3, r2
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <HAL_MspInit+0x44>)
 8000b04:	69da      	ldr	r2, [r3, #28]
 8000b06:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <HAL_MspInit+0x44>)
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	0549      	lsls	r1, r1, #21
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	61da      	str	r2, [r3, #28]
 8000b10:	4b05      	ldr	r3, [pc, #20]	@ (8000b28 <HAL_MspInit+0x44>)
 8000b12:	69da      	ldr	r2, [r3, #28]
 8000b14:	2380      	movs	r3, #128	@ 0x80
 8000b16:	055b      	lsls	r3, r3, #21
 8000b18:	4013      	ands	r3, r2
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b002      	add	sp, #8
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			@ (mov r8, r8)
 8000b28:	40021000 	.word	0x40021000

08000b2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b08b      	sub	sp, #44	@ 0x2c
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	2414      	movs	r4, #20
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f002 fa3e 	bl	8002fc0 <memset>
  if(hadc->Instance==ADC1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a2d      	ldr	r2, [pc, #180]	@ (8000c00 <HAL_ADC_MspInit+0xd4>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d153      	bne.n	8000bf6 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8000c04 <HAL_ADC_MspInit+0xd8>)
 8000b50:	699a      	ldr	r2, [r3, #24]
 8000b52:	4b2c      	ldr	r3, [pc, #176]	@ (8000c04 <HAL_ADC_MspInit+0xd8>)
 8000b54:	2180      	movs	r1, #128	@ 0x80
 8000b56:	0089      	lsls	r1, r1, #2
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	619a      	str	r2, [r3, #24]
 8000b5c:	4b29      	ldr	r3, [pc, #164]	@ (8000c04 <HAL_ADC_MspInit+0xd8>)
 8000b5e:	699a      	ldr	r2, [r3, #24]
 8000b60:	2380      	movs	r3, #128	@ 0x80
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	4b26      	ldr	r3, [pc, #152]	@ (8000c04 <HAL_ADC_MspInit+0xd8>)
 8000b6c:	695a      	ldr	r2, [r3, #20]
 8000b6e:	4b25      	ldr	r3, [pc, #148]	@ (8000c04 <HAL_ADC_MspInit+0xd8>)
 8000b70:	2180      	movs	r1, #128	@ 0x80
 8000b72:	0289      	lsls	r1, r1, #10
 8000b74:	430a      	orrs	r2, r1
 8000b76:	615a      	str	r2, [r3, #20]
 8000b78:	4b22      	ldr	r3, [pc, #136]	@ (8000c04 <HAL_ADC_MspInit+0xd8>)
 8000b7a:	695a      	ldr	r2, [r3, #20]
 8000b7c:	2380      	movs	r3, #128	@ 0x80
 8000b7e:	029b      	lsls	r3, r3, #10
 8000b80:	4013      	ands	r3, r2
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = POT1_Pin|POT2_Pin;
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	2203      	movs	r2, #3
 8000b8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	2203      	movs	r2, #3
 8000b90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	193a      	adds	r2, r7, r4
 8000b9a:	2390      	movs	r3, #144	@ 0x90
 8000b9c:	05db      	lsls	r3, r3, #23
 8000b9e:	0011      	movs	r1, r2
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f001 f837 	bl	8001c14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	@ (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000ba8:	4a18      	ldr	r2, [pc, #96]	@ (8000c0c <HAL_ADC_MspInit+0xe0>)
 8000baa:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bac:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000bba:	2280      	movs	r2, #128	@ 0x80
 8000bbc:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000bc0:	2280      	movs	r2, #128	@ 0x80
 8000bc2:	0052      	lsls	r2, r2, #1
 8000bc4:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000bc8:	2280      	movs	r2, #128	@ 0x80
 8000bca:	00d2      	lsls	r2, r2, #3
 8000bcc:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000bd0:	2220      	movs	r2, #32
 8000bd2:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000bda:	4b0b      	ldr	r3, [pc, #44]	@ (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f000 fe81 	bl	80018e4 <HAL_DMA_Init>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000be6:	f7ff ff77 	bl	8000ad8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a06      	ldr	r2, [pc, #24]	@ (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000bee:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bf0:	4b05      	ldr	r3, [pc, #20]	@ (8000c08 <HAL_ADC_MspInit+0xdc>)
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b00b      	add	sp, #44	@ 0x2c
 8000bfc:	bd90      	pop	{r4, r7, pc}
 8000bfe:	46c0      	nop			@ (mov r8, r8)
 8000c00:	40012400 	.word	0x40012400
 8000c04:	40021000 	.word	0x40021000
 8000c08:	20000078 	.word	0x20000078
 8000c0c:	40020008 	.word	0x40020008

08000c10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a12      	ldr	r2, [pc, #72]	@ (8000c68 <HAL_TIM_Base_MspInit+0x58>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d11d      	bne.n	8000c5e <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c22:	4b12      	ldr	r3, [pc, #72]	@ (8000c6c <HAL_TIM_Base_MspInit+0x5c>)
 8000c24:	699a      	ldr	r2, [r3, #24]
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <HAL_TIM_Base_MspInit+0x5c>)
 8000c28:	2180      	movs	r1, #128	@ 0x80
 8000c2a:	0109      	lsls	r1, r1, #4
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	619a      	str	r2, [r3, #24]
 8000c30:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <HAL_TIM_Base_MspInit+0x5c>)
 8000c32:	699a      	ldr	r2, [r3, #24]
 8000c34:	2380      	movs	r3, #128	@ 0x80
 8000c36:	011b      	lsls	r3, r3, #4
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2100      	movs	r1, #0
 8000c42:	200d      	movs	r0, #13
 8000c44:	f000 fe1c 	bl	8001880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000c48:	200d      	movs	r0, #13
 8000c4a:	f000 fe2e 	bl	80018aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	200e      	movs	r0, #14
 8000c54:	f000 fe14 	bl	8001880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000c58:	200e      	movs	r0, #14
 8000c5a:	f000 fe26 	bl	80018aa <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000c5e:	46c0      	nop			@ (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b004      	add	sp, #16
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			@ (mov r8, r8)
 8000c68:	40012c00 	.word	0x40012c00
 8000c6c:	40021000 	.word	0x40021000

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c74:	46c0      	nop			@ (mov r8, r8)
 8000c76:	e7fd      	b.n	8000c74 <NMI_Handler+0x4>

08000c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7c:	46c0      	nop			@ (mov r8, r8)
 8000c7e:	e7fd      	b.n	8000c7c <HardFault_Handler+0x4>

08000c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c84:	46c0      	nop			@ (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c98:	f000 f8aa 	bl	8000df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c9c:	46c0      	nop			@ (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ZeroCross_Pin);
 8000ca6:	2040      	movs	r0, #64	@ 0x40
 8000ca8:	f001 f942 	bl	8001f30 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Pir_Pin);
 8000cac:	2080      	movs	r0, #128	@ 0x80
 8000cae:	f001 f93f 	bl	8001f30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000cbc:	4b03      	ldr	r3, [pc, #12]	@ (8000ccc <DMA1_Channel1_IRQHandler+0x14>)
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f000 febe 	bl	8001a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000cc4:	46c0      	nop			@ (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	20000078 	.word	0x20000078

08000cd0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cd4:	4b03      	ldr	r3, [pc, #12]	@ (8000ce4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f001 fe1a 	bl	8002910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000cdc:	46c0      	nop			@ (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	46c0      	nop			@ (mov r8, r8)
 8000ce4:	200000bc 	.word	0x200000bc

08000ce8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cec:	4b03      	ldr	r3, [pc, #12]	@ (8000cfc <TIM1_CC_IRQHandler+0x14>)
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f001 fe0e 	bl	8002910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000cf4:	46c0      	nop			@ (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	200000bc 	.word	0x200000bc

08000d00 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d04:	46c0      	nop			@ (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d0c:	480d      	ldr	r0, [pc, #52]	@ (8000d44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d0e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d10:	f7ff fff6 	bl	8000d00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d14:	480c      	ldr	r0, [pc, #48]	@ (8000d48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d16:	490d      	ldr	r1, [pc, #52]	@ (8000d4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d18:	4a0d      	ldr	r2, [pc, #52]	@ (8000d50 <LoopForever+0xe>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d58 <LoopForever+0x16>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d3a:	f002 f949 	bl	8002fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d3e:	f7ff fcef 	bl	8000720 <main>

08000d42 <LoopForever>:

LoopForever:
    b LoopForever
 8000d42:	e7fe      	b.n	8000d42 <LoopForever>
  ldr   r0, =_estack
 8000d44:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d50:	08003068 	.word	0x08003068
  ldr r2, =_sbss
 8000d54:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d58:	20000118 	.word	0x20000118

08000d5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC1_IRQHandler>
	...

08000d60 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <HAL_Init+0x24>)
 8000d66:	681a      	ldr	r2, [r3, #0]
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_Init+0x24>)
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	430a      	orrs	r2, r1
 8000d6e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f000 f809 	bl	8000d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d76:	f7ff feb5 	bl	8000ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	40022000 	.word	0x40022000

08000d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b590      	push	{r4, r7, lr}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d90:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <HAL_InitTick+0x5c>)
 8000d92:	681c      	ldr	r4, [r3, #0]
 8000d94:	4b14      	ldr	r3, [pc, #80]	@ (8000de8 <HAL_InitTick+0x60>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	0019      	movs	r1, r3
 8000d9a:	23fa      	movs	r3, #250	@ 0xfa
 8000d9c:	0098      	lsls	r0, r3, #2
 8000d9e:	f7ff f9b3 	bl	8000108 <__udivsi3>
 8000da2:	0003      	movs	r3, r0
 8000da4:	0019      	movs	r1, r3
 8000da6:	0020      	movs	r0, r4
 8000da8:	f7ff f9ae 	bl	8000108 <__udivsi3>
 8000dac:	0003      	movs	r3, r0
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 fd8b 	bl	80018ca <HAL_SYSTICK_Config>
 8000db4:	1e03      	subs	r3, r0, #0
 8000db6:	d001      	beq.n	8000dbc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e00f      	b.n	8000ddc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b03      	cmp	r3, #3
 8000dc0:	d80b      	bhi.n	8000dda <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	425b      	negs	r3, r3
 8000dc8:	2200      	movs	r2, #0
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f000 fd58 	bl	8001880 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_InitTick+0x64>)
 8000dd2:	687a      	ldr	r2, [r7, #4]
 8000dd4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e000      	b.n	8000ddc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b003      	add	sp, #12
 8000de2:	bd90      	pop	{r4, r7, pc}
 8000de4:	20000010 	.word	0x20000010
 8000de8:	20000018 	.word	0x20000018
 8000dec:	20000014 	.word	0x20000014

08000df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b05      	ldr	r3, [pc, #20]	@ (8000e0c <HAL_IncTick+0x1c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	001a      	movs	r2, r3
 8000dfa:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <HAL_IncTick+0x20>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	18d2      	adds	r2, r2, r3
 8000e00:	4b03      	ldr	r3, [pc, #12]	@ (8000e10 <HAL_IncTick+0x20>)
 8000e02:	601a      	str	r2, [r3, #0]
}
 8000e04:	46c0      	nop			@ (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	20000018 	.word	0x20000018
 8000e10:	20000114 	.word	0x20000114

08000e14 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b02      	ldr	r3, [pc, #8]	@ (8000e24 <HAL_GetTick+0x10>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			@ (mov r8, r8)
 8000e24:	20000114 	.word	0x20000114

08000e28 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e30:	230f      	movs	r3, #15
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e125      	b.n	8001092 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d10a      	bne.n	8000e64 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2234      	movs	r2, #52	@ 0x34
 8000e58:	2100      	movs	r1, #0
 8000e5a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f7ff fe64 	bl	8000b2c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e68:	2210      	movs	r2, #16
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	d000      	beq.n	8000e70 <HAL_ADC_Init+0x48>
 8000e6e:	e103      	b.n	8001078 <HAL_ADC_Init+0x250>
 8000e70:	230f      	movs	r3, #15
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d000      	beq.n	8000e7c <HAL_ADC_Init+0x54>
 8000e7a:	e0fd      	b.n	8001078 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	2204      	movs	r2, #4
 8000e84:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000e86:	d000      	beq.n	8000e8a <HAL_ADC_Init+0x62>
 8000e88:	e0f6      	b.n	8001078 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e8e:	4a83      	ldr	r2, [pc, #524]	@ (800109c <HAL_ADC_Init+0x274>)
 8000e90:	4013      	ands	r3, r2
 8000e92:	2202      	movs	r2, #2
 8000e94:	431a      	orrs	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d112      	bne.n	8000ece <HAL_ADC_Init+0xa6>
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d009      	beq.n	8000eca <HAL_ADC_Init+0xa2>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	2380      	movs	r3, #128	@ 0x80
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	2380      	movs	r3, #128	@ 0x80
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d101      	bne.n	8000ece <HAL_ADC_Init+0xa6>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e000      	b.n	8000ed0 <HAL_ADC_Init+0xa8>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d116      	bne.n	8000f02 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	2218      	movs	r2, #24
 8000edc:	4393      	bics	r3, r2
 8000ede:	0019      	movs	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	691b      	ldr	r3, [r3, #16]
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	0899      	lsrs	r1, r3, #2
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	430a      	orrs	r2, r1
 8000f00:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	68da      	ldr	r2, [r3, #12]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4964      	ldr	r1, [pc, #400]	@ (80010a0 <HAL_ADC_Init+0x278>)
 8000f0e:	400a      	ands	r2, r1
 8000f10:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	7e1b      	ldrb	r3, [r3, #24]
 8000f16:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	7e5b      	ldrb	r3, [r3, #25]
 8000f1c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f1e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	7e9b      	ldrb	r3, [r3, #26]
 8000f24:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000f26:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d002      	beq.n	8000f36 <HAL_ADC_Init+0x10e>
 8000f30:	2380      	movs	r3, #128	@ 0x80
 8000f32:	015b      	lsls	r3, r3, #5
 8000f34:	e000      	b.n	8000f38 <HAL_ADC_Init+0x110>
 8000f36:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000f38:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000f3e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d101      	bne.n	8000f4c <HAL_ADC_Init+0x124>
 8000f48:	2304      	movs	r3, #4
 8000f4a:	e000      	b.n	8000f4e <HAL_ADC_Init+0x126>
 8000f4c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000f4e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2124      	movs	r1, #36	@ 0x24
 8000f54:	5c5b      	ldrb	r3, [r3, r1]
 8000f56:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000f58:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	7edb      	ldrb	r3, [r3, #27]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d115      	bne.n	8000f94 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	7e9b      	ldrb	r3, [r3, #26]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d105      	bne.n	8000f7c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	2280      	movs	r2, #128	@ 0x80
 8000f74:	0252      	lsls	r2, r2, #9
 8000f76:	4313      	orrs	r3, r2
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	e00b      	b.n	8000f94 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f80:	2220      	movs	r2, #32
 8000f82:	431a      	orrs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69da      	ldr	r2, [r3, #28]
 8000f98:	23c2      	movs	r3, #194	@ 0xc2
 8000f9a:	33ff      	adds	r3, #255	@ 0xff
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d007      	beq.n	8000fb0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	68d9      	ldr	r1, [r3, #12]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000fc4:	2380      	movs	r3, #128	@ 0x80
 8000fc6:	055b      	lsls	r3, r3, #21
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d01b      	beq.n	8001004 <HAL_ADC_Init+0x1dc>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d017      	beq.n	8001004 <HAL_ADC_Init+0x1dc>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d013      	beq.n	8001004 <HAL_ADC_Init+0x1dc>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fe0:	2b03      	cmp	r3, #3
 8000fe2:	d00f      	beq.n	8001004 <HAL_ADC_Init+0x1dc>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fe8:	2b04      	cmp	r3, #4
 8000fea:	d00b      	beq.n	8001004 <HAL_ADC_Init+0x1dc>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff0:	2b05      	cmp	r3, #5
 8000ff2:	d007      	beq.n	8001004 <HAL_ADC_Init+0x1dc>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff8:	2b06      	cmp	r3, #6
 8000ffa:	d003      	beq.n	8001004 <HAL_ADC_Init+0x1dc>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001000:	2b07      	cmp	r3, #7
 8001002:	d112      	bne.n	800102a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	695a      	ldr	r2, [r3, #20]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2107      	movs	r1, #7
 8001010:	438a      	bics	r2, r1
 8001012:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	6959      	ldr	r1, [r3, #20]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800101e:	2207      	movs	r2, #7
 8001020:	401a      	ands	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	430a      	orrs	r2, r1
 8001028:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	4a1c      	ldr	r2, [pc, #112]	@ (80010a4 <HAL_ADC_Init+0x27c>)
 8001032:	4013      	ands	r3, r2
 8001034:	68ba      	ldr	r2, [r7, #8]
 8001036:	429a      	cmp	r2, r3
 8001038:	d10b      	bne.n	8001052 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001044:	2203      	movs	r2, #3
 8001046:	4393      	bics	r3, r2
 8001048:	2201      	movs	r2, #1
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001050:	e01c      	b.n	800108c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001056:	2212      	movs	r2, #18
 8001058:	4393      	bics	r3, r2
 800105a:	2210      	movs	r2, #16
 800105c:	431a      	orrs	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001066:	2201      	movs	r2, #1
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800106e:	230f      	movs	r3, #15
 8001070:	18fb      	adds	r3, r7, r3
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001076:	e009      	b.n	800108c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800107c:	2210      	movs	r2, #16
 800107e:	431a      	orrs	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001084:	230f      	movs	r3, #15
 8001086:	18fb      	adds	r3, r7, r3
 8001088:	2201      	movs	r2, #1
 800108a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800108c:	230f      	movs	r3, #15
 800108e:	18fb      	adds	r3, r7, r3
 8001090:	781b      	ldrb	r3, [r3, #0]
}
 8001092:	0018      	movs	r0, r3
 8001094:	46bd      	mov	sp, r7
 8001096:	b004      	add	sp, #16
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			@ (mov r8, r8)
 800109c:	fffffefd 	.word	0xfffffefd
 80010a0:	fffe0219 	.word	0xfffe0219
 80010a4:	833fffe7 	.word	0x833fffe7

080010a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b087      	sub	sp, #28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b4:	2317      	movs	r3, #23
 80010b6:	18fb      	adds	r3, r7, r3
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	2204      	movs	r2, #4
 80010c4:	4013      	ands	r3, r2
 80010c6:	d15e      	bne.n	8001186 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2234      	movs	r2, #52	@ 0x34
 80010cc:	5c9b      	ldrb	r3, [r3, r2]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d101      	bne.n	80010d6 <HAL_ADC_Start_DMA+0x2e>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e05e      	b.n	8001194 <HAL_ADC_Start_DMA+0xec>
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2234      	movs	r2, #52	@ 0x34
 80010da:	2101      	movs	r1, #1
 80010dc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	7e5b      	ldrb	r3, [r3, #25]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	d007      	beq.n	80010f6 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80010e6:	2317      	movs	r3, #23
 80010e8:	18fc      	adds	r4, r7, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	0018      	movs	r0, r3
 80010ee:	f000 f96b 	bl	80013c8 <ADC_Enable>
 80010f2:	0003      	movs	r3, r0
 80010f4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80010f6:	2317      	movs	r3, #23
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d146      	bne.n	800118e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001104:	4a25      	ldr	r2, [pc, #148]	@ (800119c <HAL_ADC_Start_DMA+0xf4>)
 8001106:	4013      	ands	r3, r2
 8001108:	2280      	movs	r2, #128	@ 0x80
 800110a:	0052      	lsls	r2, r2, #1
 800110c:	431a      	orrs	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2200      	movs	r2, #0
 8001116:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2234      	movs	r2, #52	@ 0x34
 800111c:	2100      	movs	r1, #0
 800111e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001124:	4a1e      	ldr	r2, [pc, #120]	@ (80011a0 <HAL_ADC_Start_DMA+0xf8>)
 8001126:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112c:	4a1d      	ldr	r2, [pc, #116]	@ (80011a4 <HAL_ADC_Start_DMA+0xfc>)
 800112e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001134:	4a1c      	ldr	r2, [pc, #112]	@ (80011a8 <HAL_ADC_Start_DMA+0x100>)
 8001136:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	221c      	movs	r2, #28
 800113e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2110      	movs	r1, #16
 800114c:	430a      	orrs	r2, r1
 800114e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2101      	movs	r1, #1
 800115c:	430a      	orrs	r2, r1
 800115e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3340      	adds	r3, #64	@ 0x40
 800116a:	0019      	movs	r1, r3
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f000 fc00 	bl	8001974 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2104      	movs	r1, #4
 8001180:	430a      	orrs	r2, r1
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	e003      	b.n	800118e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001186:	2317      	movs	r3, #23
 8001188:	18fb      	adds	r3, r7, r3
 800118a:	2202      	movs	r2, #2
 800118c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800118e:	2317      	movs	r3, #23
 8001190:	18fb      	adds	r3, r7, r3
 8001192:	781b      	ldrb	r3, [r3, #0]
}
 8001194:	0018      	movs	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	b007      	add	sp, #28
 800119a:	bd90      	pop	{r4, r7, pc}
 800119c:	fffff0fe 	.word	0xfffff0fe
 80011a0:	080014d1 	.word	0x080014d1
 80011a4:	08001585 	.word	0x08001585
 80011a8:	080015a3 	.word	0x080015a3

080011ac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80011b4:	46c0      	nop			@ (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b002      	add	sp, #8
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80011c4:	46c0      	nop			@ (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b002      	add	sp, #8
 80011ca:	bd80      	pop	{r7, pc}

080011cc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80011d4:	46c0      	nop			@ (mov r8, r8)
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b002      	add	sp, #8
 80011da:	bd80      	pop	{r7, pc}

080011dc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e6:	230f      	movs	r3, #15
 80011e8:	18fb      	adds	r3, r7, r3
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011f6:	2380      	movs	r3, #128	@ 0x80
 80011f8:	055b      	lsls	r3, r3, #21
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d011      	beq.n	8001222 <HAL_ADC_ConfigChannel+0x46>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001202:	2b01      	cmp	r3, #1
 8001204:	d00d      	beq.n	8001222 <HAL_ADC_ConfigChannel+0x46>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800120a:	2b02      	cmp	r3, #2
 800120c:	d009      	beq.n	8001222 <HAL_ADC_ConfigChannel+0x46>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001212:	2b03      	cmp	r3, #3
 8001214:	d005      	beq.n	8001222 <HAL_ADC_ConfigChannel+0x46>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800121a:	2b04      	cmp	r3, #4
 800121c:	d001      	beq.n	8001222 <HAL_ADC_ConfigChannel+0x46>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2234      	movs	r2, #52	@ 0x34
 8001226:	5c9b      	ldrb	r3, [r3, r2]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d101      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x54>
 800122c:	2302      	movs	r3, #2
 800122e:	e0bb      	b.n	80013a8 <HAL_ADC_ConfigChannel+0x1cc>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2234      	movs	r2, #52	@ 0x34
 8001234:	2101      	movs	r1, #1
 8001236:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	2204      	movs	r2, #4
 8001240:	4013      	ands	r3, r2
 8001242:	d000      	beq.n	8001246 <HAL_ADC_ConfigChannel+0x6a>
 8001244:	e09f      	b.n	8001386 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4a59      	ldr	r2, [pc, #356]	@ (80013b0 <HAL_ADC_ConfigChannel+0x1d4>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d100      	bne.n	8001252 <HAL_ADC_ConfigChannel+0x76>
 8001250:	e077      	b.n	8001342 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2201      	movs	r2, #1
 800125e:	409a      	lsls	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800126c:	2380      	movs	r3, #128	@ 0x80
 800126e:	055b      	lsls	r3, r3, #21
 8001270:	429a      	cmp	r2, r3
 8001272:	d037      	beq.n	80012e4 <HAL_ADC_ConfigChannel+0x108>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001278:	2b01      	cmp	r3, #1
 800127a:	d033      	beq.n	80012e4 <HAL_ADC_ConfigChannel+0x108>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001280:	2b02      	cmp	r3, #2
 8001282:	d02f      	beq.n	80012e4 <HAL_ADC_ConfigChannel+0x108>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001288:	2b03      	cmp	r3, #3
 800128a:	d02b      	beq.n	80012e4 <HAL_ADC_ConfigChannel+0x108>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001290:	2b04      	cmp	r3, #4
 8001292:	d027      	beq.n	80012e4 <HAL_ADC_ConfigChannel+0x108>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001298:	2b05      	cmp	r3, #5
 800129a:	d023      	beq.n	80012e4 <HAL_ADC_ConfigChannel+0x108>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a0:	2b06      	cmp	r3, #6
 80012a2:	d01f      	beq.n	80012e4 <HAL_ADC_ConfigChannel+0x108>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012a8:	2b07      	cmp	r3, #7
 80012aa:	d01b      	beq.n	80012e4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	689a      	ldr	r2, [r3, #8]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	2107      	movs	r1, #7
 80012b8:	400b      	ands	r3, r1
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d012      	beq.n	80012e4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	695a      	ldr	r2, [r3, #20]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2107      	movs	r1, #7
 80012ca:	438a      	bics	r2, r1
 80012cc:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6959      	ldr	r1, [r3, #20]
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	2207      	movs	r2, #7
 80012da:	401a      	ands	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	430a      	orrs	r2, r1
 80012e2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b10      	cmp	r3, #16
 80012ea:	d003      	beq.n	80012f4 <HAL_ADC_ConfigChannel+0x118>
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b11      	cmp	r3, #17
 80012f2:	d152      	bne.n	800139a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80012f4:	4b2f      	ldr	r3, [pc, #188]	@ (80013b4 <HAL_ADC_ConfigChannel+0x1d8>)
 80012f6:	6819      	ldr	r1, [r3, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b10      	cmp	r3, #16
 80012fe:	d102      	bne.n	8001306 <HAL_ADC_ConfigChannel+0x12a>
 8001300:	2380      	movs	r3, #128	@ 0x80
 8001302:	041b      	lsls	r3, r3, #16
 8001304:	e001      	b.n	800130a <HAL_ADC_ConfigChannel+0x12e>
 8001306:	2380      	movs	r3, #128	@ 0x80
 8001308:	03db      	lsls	r3, r3, #15
 800130a:	4a2a      	ldr	r2, [pc, #168]	@ (80013b4 <HAL_ADC_ConfigChannel+0x1d8>)
 800130c:	430b      	orrs	r3, r1
 800130e:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b10      	cmp	r3, #16
 8001316:	d140      	bne.n	800139a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001318:	4b27      	ldr	r3, [pc, #156]	@ (80013b8 <HAL_ADC_ConfigChannel+0x1dc>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4927      	ldr	r1, [pc, #156]	@ (80013bc <HAL_ADC_ConfigChannel+0x1e0>)
 800131e:	0018      	movs	r0, r3
 8001320:	f7fe fef2 	bl	8000108 <__udivsi3>
 8001324:	0003      	movs	r3, r0
 8001326:	001a      	movs	r2, r3
 8001328:	0013      	movs	r3, r2
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	189b      	adds	r3, r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001332:	e002      	b.n	800133a <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	3b01      	subs	r3, #1
 8001338:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f9      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x158>
 8001340:	e02b      	b.n	800139a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2101      	movs	r1, #1
 800134e:	4099      	lsls	r1, r3
 8001350:	000b      	movs	r3, r1
 8001352:	43d9      	mvns	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	400a      	ands	r2, r1
 800135a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b10      	cmp	r3, #16
 8001362:	d003      	beq.n	800136c <HAL_ADC_ConfigChannel+0x190>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b11      	cmp	r3, #17
 800136a:	d116      	bne.n	800139a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800136c:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <HAL_ADC_ConfigChannel+0x1d8>)
 800136e:	6819      	ldr	r1, [r3, #0]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b10      	cmp	r3, #16
 8001376:	d101      	bne.n	800137c <HAL_ADC_ConfigChannel+0x1a0>
 8001378:	4a11      	ldr	r2, [pc, #68]	@ (80013c0 <HAL_ADC_ConfigChannel+0x1e4>)
 800137a:	e000      	b.n	800137e <HAL_ADC_ConfigChannel+0x1a2>
 800137c:	4a11      	ldr	r2, [pc, #68]	@ (80013c4 <HAL_ADC_ConfigChannel+0x1e8>)
 800137e:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <HAL_ADC_ConfigChannel+0x1d8>)
 8001380:	400a      	ands	r2, r1
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e009      	b.n	800139a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800138a:	2220      	movs	r2, #32
 800138c:	431a      	orrs	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001392:	230f      	movs	r3, #15
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	2201      	movs	r2, #1
 8001398:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2234      	movs	r2, #52	@ 0x34
 800139e:	2100      	movs	r1, #0
 80013a0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80013a2:	230f      	movs	r3, #15
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	781b      	ldrb	r3, [r3, #0]
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b004      	add	sp, #16
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	00001001 	.word	0x00001001
 80013b4:	40012708 	.word	0x40012708
 80013b8:	20000010 	.word	0x20000010
 80013bc:	000f4240 	.word	0x000f4240
 80013c0:	ff7fffff 	.word	0xff7fffff
 80013c4:	ffbfffff 	.word	0xffbfffff

080013c8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013d0:	2300      	movs	r3, #0
 80013d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2203      	movs	r2, #3
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d112      	bne.n	800140c <ADC_Enable+0x44>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2201      	movs	r2, #1
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d009      	beq.n	8001408 <ADC_Enable+0x40>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	2380      	movs	r3, #128	@ 0x80
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	401a      	ands	r2, r3
 8001400:	2380      	movs	r3, #128	@ 0x80
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	429a      	cmp	r2, r3
 8001406:	d101      	bne.n	800140c <ADC_Enable+0x44>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <ADC_Enable+0x46>
 800140c:	2300      	movs	r3, #0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d152      	bne.n	80014b8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	4a2a      	ldr	r2, [pc, #168]	@ (80014c4 <ADC_Enable+0xfc>)
 800141a:	4013      	ands	r3, r2
 800141c:	d00d      	beq.n	800143a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001422:	2210      	movs	r2, #16
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800142e:	2201      	movs	r2, #1
 8001430:	431a      	orrs	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e03f      	b.n	80014ba <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2101      	movs	r1, #1
 8001446:	430a      	orrs	r2, r1
 8001448:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800144a:	4b1f      	ldr	r3, [pc, #124]	@ (80014c8 <ADC_Enable+0x100>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	491f      	ldr	r1, [pc, #124]	@ (80014cc <ADC_Enable+0x104>)
 8001450:	0018      	movs	r0, r3
 8001452:	f7fe fe59 	bl	8000108 <__udivsi3>
 8001456:	0003      	movs	r3, r0
 8001458:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800145a:	e002      	b.n	8001462 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	3b01      	subs	r3, #1
 8001460:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1f9      	bne.n	800145c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001468:	f7ff fcd4 	bl	8000e14 <HAL_GetTick>
 800146c:	0003      	movs	r3, r0
 800146e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001470:	e01b      	b.n	80014aa <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001472:	f7ff fccf 	bl	8000e14 <HAL_GetTick>
 8001476:	0002      	movs	r2, r0
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d914      	bls.n	80014aa <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2201      	movs	r2, #1
 8001488:	4013      	ands	r3, r2
 800148a:	2b01      	cmp	r3, #1
 800148c:	d00d      	beq.n	80014aa <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001492:	2210      	movs	r2, #16
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800149e:	2201      	movs	r2, #1
 80014a0:	431a      	orrs	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e007      	b.n	80014ba <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2201      	movs	r2, #1
 80014b2:	4013      	ands	r3, r2
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d1dc      	bne.n	8001472 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	0018      	movs	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	b004      	add	sp, #16
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	46c0      	nop			@ (mov r8, r8)
 80014c4:	80000017 	.word	0x80000017
 80014c8:	20000010 	.word	0x20000010
 80014cc:	000f4240 	.word	0x000f4240

080014d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014dc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014e2:	2250      	movs	r2, #80	@ 0x50
 80014e4:	4013      	ands	r3, r2
 80014e6:	d140      	bne.n	800156a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ec:	2280      	movs	r2, #128	@ 0x80
 80014ee:	0092      	lsls	r2, r2, #2
 80014f0:	431a      	orrs	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	23c0      	movs	r3, #192	@ 0xc0
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	4013      	ands	r3, r2
 8001502:	d12d      	bne.n	8001560 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001508:	2b00      	cmp	r3, #0
 800150a:	d129      	bne.n	8001560 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2208      	movs	r2, #8
 8001514:	4013      	ands	r3, r2
 8001516:	2b08      	cmp	r3, #8
 8001518:	d122      	bne.n	8001560 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2204      	movs	r2, #4
 8001522:	4013      	ands	r3, r2
 8001524:	d110      	bne.n	8001548 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	210c      	movs	r1, #12
 8001532:	438a      	bics	r2, r1
 8001534:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800153a:	4a11      	ldr	r2, [pc, #68]	@ (8001580 <ADC_DMAConvCplt+0xb0>)
 800153c:	4013      	ands	r3, r2
 800153e:	2201      	movs	r2, #1
 8001540:	431a      	orrs	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	639a      	str	r2, [r3, #56]	@ 0x38
 8001546:	e00b      	b.n	8001560 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800154c:	2220      	movs	r2, #32
 800154e:	431a      	orrs	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001558:	2201      	movs	r2, #1
 800155a:	431a      	orrs	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	0018      	movs	r0, r3
 8001564:	f7ff fe22 	bl	80011ac <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001568:	e005      	b.n	8001576 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	0010      	movs	r0, r2
 8001574:	4798      	blx	r3
}
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b004      	add	sp, #16
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			@ (mov r8, r8)
 8001580:	fffffefe 	.word	0xfffffefe

08001584 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001590:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	0018      	movs	r0, r3
 8001596:	f7ff fe11 	bl	80011bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800159a:	46c0      	nop			@ (mov r8, r8)
 800159c:	46bd      	mov	sp, r7
 800159e:	b004      	add	sp, #16
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	b084      	sub	sp, #16
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ae:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015b4:	2240      	movs	r2, #64	@ 0x40
 80015b6:	431a      	orrs	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015c0:	2204      	movs	r2, #4
 80015c2:	431a      	orrs	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	0018      	movs	r0, r3
 80015cc:	f7ff fdfe 	bl	80011cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80015d0:	46c0      	nop			@ (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b004      	add	sp, #16
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015e0:	2317      	movs	r3, #23
 80015e2:	18fb      	adds	r3, r7, r3
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2234      	movs	r2, #52	@ 0x34
 80015f4:	5c9b      	ldrb	r3, [r3, r2]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_ADCEx_Calibration_Start+0x26>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e08d      	b.n	800171a <HAL_ADCEx_Calibration_Start+0x142>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2234      	movs	r2, #52	@ 0x34
 8001602:	2101      	movs	r1, #1
 8001604:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2203      	movs	r2, #3
 800160e:	4013      	ands	r3, r2
 8001610:	2b01      	cmp	r3, #1
 8001612:	d112      	bne.n	800163a <HAL_ADCEx_Calibration_Start+0x62>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2201      	movs	r2, #1
 800161c:	4013      	ands	r3, r2
 800161e:	2b01      	cmp	r3, #1
 8001620:	d009      	beq.n	8001636 <HAL_ADCEx_Calibration_Start+0x5e>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	68da      	ldr	r2, [r3, #12]
 8001628:	2380      	movs	r3, #128	@ 0x80
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	401a      	ands	r2, r3
 800162e:	2380      	movs	r3, #128	@ 0x80
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	429a      	cmp	r2, r3
 8001634:	d101      	bne.n	800163a <HAL_ADCEx_Calibration_Start+0x62>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_ADCEx_Calibration_Start+0x64>
 800163a:	2300      	movs	r3, #0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d15b      	bne.n	80016f8 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001644:	4a37      	ldr	r2, [pc, #220]	@ (8001724 <HAL_ADCEx_Calibration_Start+0x14c>)
 8001646:	4013      	ands	r3, r2
 8001648:	2202      	movs	r2, #2
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2203      	movs	r2, #3
 8001658:	4013      	ands	r3, r2
 800165a:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	2103      	movs	r1, #3
 8001668:	438a      	bics	r2, r1
 800166a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2180      	movs	r1, #128	@ 0x80
 8001678:	0609      	lsls	r1, r1, #24
 800167a:	430a      	orrs	r2, r1
 800167c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800167e:	f7ff fbc9 	bl	8000e14 <HAL_GetTick>
 8001682:	0003      	movs	r3, r0
 8001684:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001686:	e01d      	b.n	80016c4 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001688:	f7ff fbc4 	bl	8000e14 <HAL_GetTick>
 800168c:	0002      	movs	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d916      	bls.n	80016c4 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	0fdb      	lsrs	r3, r3, #31
 800169e:	07da      	lsls	r2, r3, #31
 80016a0:	2380      	movs	r3, #128	@ 0x80
 80016a2:	061b      	lsls	r3, r3, #24
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d10d      	bne.n	80016c4 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ac:	2212      	movs	r2, #18
 80016ae:	4393      	bics	r3, r2
 80016b0:	2210      	movs	r2, #16
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	639a      	str	r2, [r3, #56]	@ 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2234      	movs	r2, #52	@ 0x34
 80016bc:	2100      	movs	r1, #0
 80016be:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e02a      	b.n	800171a <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	0fdb      	lsrs	r3, r3, #31
 80016cc:	07da      	lsls	r2, r3, #31
 80016ce:	2380      	movs	r3, #128	@ 0x80
 80016d0:	061b      	lsls	r3, r3, #24
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d0d8      	beq.n	8001688 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68d9      	ldr	r1, [r3, #12]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68fa      	ldr	r2, [r7, #12]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ea:	2203      	movs	r2, #3
 80016ec:	4393      	bics	r3, r2
 80016ee:	2201      	movs	r2, #1
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80016f6:	e009      	b.n	800170c <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016fc:	2220      	movs	r2, #32
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001704:	2317      	movs	r3, #23
 8001706:	18fb      	adds	r3, r7, r3
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2234      	movs	r2, #52	@ 0x34
 8001710:	2100      	movs	r1, #0
 8001712:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001714:	2317      	movs	r3, #23
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	781b      	ldrb	r3, [r3, #0]
}
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b006      	add	sp, #24
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	fffffefd 	.word	0xfffffefd

08001728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	0002      	movs	r2, r0
 8001730:	1dfb      	adds	r3, r7, #7
 8001732:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001734:	1dfb      	adds	r3, r7, #7
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b7f      	cmp	r3, #127	@ 0x7f
 800173a:	d809      	bhi.n	8001750 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173c:	1dfb      	adds	r3, r7, #7
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	001a      	movs	r2, r3
 8001742:	231f      	movs	r3, #31
 8001744:	401a      	ands	r2, r3
 8001746:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <__NVIC_EnableIRQ+0x30>)
 8001748:	2101      	movs	r1, #1
 800174a:	4091      	lsls	r1, r2
 800174c:	000a      	movs	r2, r1
 800174e:	601a      	str	r2, [r3, #0]
  }
}
 8001750:	46c0      	nop			@ (mov r8, r8)
 8001752:	46bd      	mov	sp, r7
 8001754:	b002      	add	sp, #8
 8001756:	bd80      	pop	{r7, pc}
 8001758:	e000e100 	.word	0xe000e100

0800175c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800175c:	b590      	push	{r4, r7, lr}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	0002      	movs	r2, r0
 8001764:	6039      	str	r1, [r7, #0]
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800176a:	1dfb      	adds	r3, r7, #7
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001770:	d828      	bhi.n	80017c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001772:	4a2f      	ldr	r2, [pc, #188]	@ (8001830 <__NVIC_SetPriority+0xd4>)
 8001774:	1dfb      	adds	r3, r7, #7
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	b25b      	sxtb	r3, r3
 800177a:	089b      	lsrs	r3, r3, #2
 800177c:	33c0      	adds	r3, #192	@ 0xc0
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	589b      	ldr	r3, [r3, r2]
 8001782:	1dfa      	adds	r2, r7, #7
 8001784:	7812      	ldrb	r2, [r2, #0]
 8001786:	0011      	movs	r1, r2
 8001788:	2203      	movs	r2, #3
 800178a:	400a      	ands	r2, r1
 800178c:	00d2      	lsls	r2, r2, #3
 800178e:	21ff      	movs	r1, #255	@ 0xff
 8001790:	4091      	lsls	r1, r2
 8001792:	000a      	movs	r2, r1
 8001794:	43d2      	mvns	r2, r2
 8001796:	401a      	ands	r2, r3
 8001798:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	019b      	lsls	r3, r3, #6
 800179e:	22ff      	movs	r2, #255	@ 0xff
 80017a0:	401a      	ands	r2, r3
 80017a2:	1dfb      	adds	r3, r7, #7
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	0018      	movs	r0, r3
 80017a8:	2303      	movs	r3, #3
 80017aa:	4003      	ands	r3, r0
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017b0:	481f      	ldr	r0, [pc, #124]	@ (8001830 <__NVIC_SetPriority+0xd4>)
 80017b2:	1dfb      	adds	r3, r7, #7
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	089b      	lsrs	r3, r3, #2
 80017ba:	430a      	orrs	r2, r1
 80017bc:	33c0      	adds	r3, #192	@ 0xc0
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80017c2:	e031      	b.n	8001828 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001834 <__NVIC_SetPriority+0xd8>)
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	0019      	movs	r1, r3
 80017cc:	230f      	movs	r3, #15
 80017ce:	400b      	ands	r3, r1
 80017d0:	3b08      	subs	r3, #8
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3306      	adds	r3, #6
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	18d3      	adds	r3, r2, r3
 80017da:	3304      	adds	r3, #4
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	1dfa      	adds	r2, r7, #7
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	0011      	movs	r1, r2
 80017e4:	2203      	movs	r2, #3
 80017e6:	400a      	ands	r2, r1
 80017e8:	00d2      	lsls	r2, r2, #3
 80017ea:	21ff      	movs	r1, #255	@ 0xff
 80017ec:	4091      	lsls	r1, r2
 80017ee:	000a      	movs	r2, r1
 80017f0:	43d2      	mvns	r2, r2
 80017f2:	401a      	ands	r2, r3
 80017f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	019b      	lsls	r3, r3, #6
 80017fa:	22ff      	movs	r2, #255	@ 0xff
 80017fc:	401a      	ands	r2, r3
 80017fe:	1dfb      	adds	r3, r7, #7
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	0018      	movs	r0, r3
 8001804:	2303      	movs	r3, #3
 8001806:	4003      	ands	r3, r0
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800180c:	4809      	ldr	r0, [pc, #36]	@ (8001834 <__NVIC_SetPriority+0xd8>)
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	001c      	movs	r4, r3
 8001814:	230f      	movs	r3, #15
 8001816:	4023      	ands	r3, r4
 8001818:	3b08      	subs	r3, #8
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	430a      	orrs	r2, r1
 800181e:	3306      	adds	r3, #6
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	18c3      	adds	r3, r0, r3
 8001824:	3304      	adds	r3, #4
 8001826:	601a      	str	r2, [r3, #0]
}
 8001828:	46c0      	nop			@ (mov r8, r8)
 800182a:	46bd      	mov	sp, r7
 800182c:	b003      	add	sp, #12
 800182e:	bd90      	pop	{r4, r7, pc}
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	1e5a      	subs	r2, r3, #1
 8001844:	2380      	movs	r3, #128	@ 0x80
 8001846:	045b      	lsls	r3, r3, #17
 8001848:	429a      	cmp	r2, r3
 800184a:	d301      	bcc.n	8001850 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184c:	2301      	movs	r3, #1
 800184e:	e010      	b.n	8001872 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001850:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <SysTick_Config+0x44>)
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	3a01      	subs	r2, #1
 8001856:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001858:	2301      	movs	r3, #1
 800185a:	425b      	negs	r3, r3
 800185c:	2103      	movs	r1, #3
 800185e:	0018      	movs	r0, r3
 8001860:	f7ff ff7c 	bl	800175c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	4b05      	ldr	r3, [pc, #20]	@ (800187c <SysTick_Config+0x44>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	4b04      	ldr	r3, [pc, #16]	@ (800187c <SysTick_Config+0x44>)
 800186c:	2207      	movs	r2, #7
 800186e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001870:	2300      	movs	r3, #0
}
 8001872:	0018      	movs	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	b002      	add	sp, #8
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			@ (mov r8, r8)
 800187c:	e000e010 	.word	0xe000e010

08001880 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	210f      	movs	r1, #15
 800188c:	187b      	adds	r3, r7, r1
 800188e:	1c02      	adds	r2, r0, #0
 8001890:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	187b      	adds	r3, r7, r1
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b25b      	sxtb	r3, r3
 800189a:	0011      	movs	r1, r2
 800189c:	0018      	movs	r0, r3
 800189e:	f7ff ff5d 	bl	800175c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80018a2:	46c0      	nop			@ (mov r8, r8)
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b004      	add	sp, #16
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	0002      	movs	r2, r0
 80018b2:	1dfb      	adds	r3, r7, #7
 80018b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b6:	1dfb      	adds	r3, r7, #7
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	b25b      	sxtb	r3, r3
 80018bc:	0018      	movs	r0, r3
 80018be:	f7ff ff33 	bl	8001728 <__NVIC_EnableIRQ>
}
 80018c2:	46c0      	nop			@ (mov r8, r8)
 80018c4:	46bd      	mov	sp, r7
 80018c6:	b002      	add	sp, #8
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	0018      	movs	r0, r3
 80018d6:	f7ff ffaf 	bl	8001838 <SysTick_Config>
 80018da:	0003      	movs	r3, r0
}
 80018dc:	0018      	movs	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	b002      	add	sp, #8
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e036      	b.n	8001968 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2221      	movs	r2, #33	@ 0x21
 80018fe:	2102      	movs	r1, #2
 8001900:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4a18      	ldr	r2, [pc, #96]	@ (8001970 <HAL_DMA_Init+0x8c>)
 800190e:	4013      	ands	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800191a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001926:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001932:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	4313      	orrs	r3, r2
 800193e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	0018      	movs	r0, r3
 800194c:	f000 f946 	bl	8001bdc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2221      	movs	r2, #33	@ 0x21
 800195a:	2101      	movs	r1, #1
 800195c:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2220      	movs	r2, #32
 8001962:	2100      	movs	r1, #0
 8001964:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	0018      	movs	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	b004      	add	sp, #16
 800196e:	bd80      	pop	{r7, pc}
 8001970:	ffffc00f 	.word	0xffffc00f

08001974 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
 8001980:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001982:	2317      	movs	r3, #23
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2220      	movs	r2, #32
 800198e:	5c9b      	ldrb	r3, [r3, r2]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_DMA_Start_IT+0x24>
 8001994:	2302      	movs	r3, #2
 8001996:	e04f      	b.n	8001a38 <HAL_DMA_Start_IT+0xc4>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2220      	movs	r2, #32
 800199c:	2101      	movs	r1, #1
 800199e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2221      	movs	r2, #33	@ 0x21
 80019a4:	5c9b      	ldrb	r3, [r3, r2]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d13a      	bne.n	8001a22 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2221      	movs	r2, #33	@ 0x21
 80019b0:	2102      	movs	r1, #2
 80019b2:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2101      	movs	r1, #1
 80019c6:	438a      	bics	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	68b9      	ldr	r1, [r7, #8]
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f000 f8d7 	bl	8001b84 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d008      	beq.n	80019f0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	210e      	movs	r1, #14
 80019ea:	430a      	orrs	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	e00f      	b.n	8001a10 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	210a      	movs	r1, #10
 80019fc:	430a      	orrs	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2104      	movs	r1, #4
 8001a0c:	438a      	bics	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	e007      	b.n	8001a32 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2220      	movs	r2, #32
 8001a26:	2100      	movs	r1, #0
 8001a28:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a2a:	2317      	movs	r3, #23
 8001a2c:	18fb      	adds	r3, r7, r3
 8001a2e:	2202      	movs	r2, #2
 8001a30:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001a32:	2317      	movs	r3, #23
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	781b      	ldrb	r3, [r3, #0]
}
 8001a38:	0018      	movs	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b006      	add	sp, #24
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	0013      	movs	r3, r2
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	4013      	ands	r3, r2
 8001a66:	d024      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0x72>
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d020      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2220      	movs	r2, #32
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d107      	bne.n	8001a8c <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2104      	movs	r1, #4
 8001a88:	438a      	bics	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a94:	2104      	movs	r1, #4
 8001a96:	4091      	lsls	r1, r2
 8001a98:	000a      	movs	r2, r1
 8001a9a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d100      	bne.n	8001aa6 <HAL_DMA_IRQHandler+0x66>
 8001aa4:	e06a      	b.n	8001b7c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	0010      	movs	r0, r2
 8001aae:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001ab0:	e064      	b.n	8001b7c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	409a      	lsls	r2, r3
 8001aba:	0013      	movs	r3, r2
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d02b      	beq.n	8001b1a <HAL_DMA_IRQHandler+0xda>
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d027      	beq.n	8001b1a <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d10b      	bne.n	8001aee <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	210a      	movs	r1, #10
 8001ae2:	438a      	bics	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2221      	movs	r2, #33	@ 0x21
 8001aea:	2101      	movs	r1, #1
 8001aec:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001af6:	2102      	movs	r1, #2
 8001af8:	4091      	lsls	r1, r2
 8001afa:	000a      	movs	r2, r1
 8001afc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2220      	movs	r2, #32
 8001b02:	2100      	movs	r1, #0
 8001b04:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d036      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	0010      	movs	r0, r2
 8001b16:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b18:	e030      	b.n	8001b7c <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	2208      	movs	r2, #8
 8001b20:	409a      	lsls	r2, r3
 8001b22:	0013      	movs	r3, r2
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4013      	ands	r3, r2
 8001b28:	d028      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x13c>
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2208      	movs	r2, #8
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d024      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	210e      	movs	r1, #14
 8001b3e:	438a      	bics	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	4091      	lsls	r1, r2
 8001b4e:	000a      	movs	r2, r1
 8001b50:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2221      	movs	r2, #33	@ 0x21
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2220      	movs	r2, #32
 8001b64:	2100      	movs	r1, #0
 8001b66:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	0010      	movs	r0, r2
 8001b78:	4798      	blx	r3
    }
  }
}
 8001b7a:	e7ff      	b.n	8001b7c <HAL_DMA_IRQHandler+0x13c>
 8001b7c:	46c0      	nop			@ (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b004      	add	sp, #16
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	4091      	lsls	r1, r2
 8001b9e:	000a      	movs	r2, r1
 8001ba0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b10      	cmp	r3, #16
 8001bb0:	d108      	bne.n	8001bc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bc2:	e007      	b.n	8001bd4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	60da      	str	r2, [r3, #12]
}
 8001bd4:	46c0      	nop			@ (mov r8, r8)
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b004      	add	sp, #16
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a08      	ldr	r2, [pc, #32]	@ (8001c0c <DMA_CalcBaseAndBitshift+0x30>)
 8001bea:	4694      	mov	ip, r2
 8001bec:	4463      	add	r3, ip
 8001bee:	2114      	movs	r1, #20
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f7fe fa89 	bl	8000108 <__udivsi3>
 8001bf6:	0003      	movs	r3, r0
 8001bf8:	009a      	lsls	r2, r3, #2
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a03      	ldr	r2, [pc, #12]	@ (8001c10 <DMA_CalcBaseAndBitshift+0x34>)
 8001c02:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001c04:	46c0      	nop			@ (mov r8, r8)
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b002      	add	sp, #8
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	bffdfff8 	.word	0xbffdfff8
 8001c10:	40020000 	.word	0x40020000

08001c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c22:	e14f      	b.n	8001ec4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2101      	movs	r1, #1
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	4091      	lsls	r1, r2
 8001c2e:	000a      	movs	r2, r1
 8001c30:	4013      	ands	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d100      	bne.n	8001c3c <HAL_GPIO_Init+0x28>
 8001c3a:	e140      	b.n	8001ebe <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2203      	movs	r2, #3
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d005      	beq.n	8001c54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2203      	movs	r2, #3
 8001c4e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d130      	bne.n	8001cb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	409a      	lsls	r2, r3
 8001c62:	0013      	movs	r3, r2
 8001c64:	43da      	mvns	r2, r3
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	409a      	lsls	r2, r3
 8001c76:	0013      	movs	r3, r2
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	0013      	movs	r3, r2
 8001c92:	43da      	mvns	r2, r3
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	091b      	lsrs	r3, r3, #4
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	401a      	ands	r2, r3
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	0013      	movs	r3, r2
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2203      	movs	r2, #3
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d017      	beq.n	8001cf2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	2203      	movs	r2, #3
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	0013      	movs	r3, r2
 8001cd2:	43da      	mvns	r2, r3
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	0013      	movs	r3, r2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d123      	bne.n	8001d46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	08da      	lsrs	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3208      	adds	r2, #8
 8001d06:	0092      	lsls	r2, r2, #2
 8001d08:	58d3      	ldr	r3, [r2, r3]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2207      	movs	r2, #7
 8001d10:	4013      	ands	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	220f      	movs	r2, #15
 8001d16:	409a      	lsls	r2, r3
 8001d18:	0013      	movs	r3, r2
 8001d1a:	43da      	mvns	r2, r3
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	2107      	movs	r1, #7
 8001d2a:	400b      	ands	r3, r1
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	0013      	movs	r3, r2
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	08da      	lsrs	r2, r3, #3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3208      	adds	r2, #8
 8001d40:	0092      	lsls	r2, r2, #2
 8001d42:	6939      	ldr	r1, [r7, #16]
 8001d44:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	2203      	movs	r2, #3
 8001d52:	409a      	lsls	r2, r3
 8001d54:	0013      	movs	r3, r2
 8001d56:	43da      	mvns	r2, r3
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2203      	movs	r2, #3
 8001d64:	401a      	ands	r2, r3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	0013      	movs	r3, r2
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685a      	ldr	r2, [r3, #4]
 8001d7e:	23c0      	movs	r3, #192	@ 0xc0
 8001d80:	029b      	lsls	r3, r3, #10
 8001d82:	4013      	ands	r3, r2
 8001d84:	d100      	bne.n	8001d88 <HAL_GPIO_Init+0x174>
 8001d86:	e09a      	b.n	8001ebe <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d88:	4b54      	ldr	r3, [pc, #336]	@ (8001edc <HAL_GPIO_Init+0x2c8>)
 8001d8a:	699a      	ldr	r2, [r3, #24]
 8001d8c:	4b53      	ldr	r3, [pc, #332]	@ (8001edc <HAL_GPIO_Init+0x2c8>)
 8001d8e:	2101      	movs	r1, #1
 8001d90:	430a      	orrs	r2, r1
 8001d92:	619a      	str	r2, [r3, #24]
 8001d94:	4b51      	ldr	r3, [pc, #324]	@ (8001edc <HAL_GPIO_Init+0x2c8>)
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001da0:	4a4f      	ldr	r2, [pc, #316]	@ (8001ee0 <HAL_GPIO_Init+0x2cc>)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	089b      	lsrs	r3, r3, #2
 8001da6:	3302      	adds	r3, #2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	589b      	ldr	r3, [r3, r2]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	2203      	movs	r2, #3
 8001db2:	4013      	ands	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	220f      	movs	r2, #15
 8001db8:	409a      	lsls	r2, r3
 8001dba:	0013      	movs	r3, r2
 8001dbc:	43da      	mvns	r2, r3
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	2390      	movs	r3, #144	@ 0x90
 8001dc8:	05db      	lsls	r3, r3, #23
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d013      	beq.n	8001df6 <HAL_GPIO_Init+0x1e2>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a44      	ldr	r2, [pc, #272]	@ (8001ee4 <HAL_GPIO_Init+0x2d0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00d      	beq.n	8001df2 <HAL_GPIO_Init+0x1de>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a43      	ldr	r2, [pc, #268]	@ (8001ee8 <HAL_GPIO_Init+0x2d4>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d007      	beq.n	8001dee <HAL_GPIO_Init+0x1da>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a42      	ldr	r2, [pc, #264]	@ (8001eec <HAL_GPIO_Init+0x2d8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d101      	bne.n	8001dea <HAL_GPIO_Init+0x1d6>
 8001de6:	2303      	movs	r3, #3
 8001de8:	e006      	b.n	8001df8 <HAL_GPIO_Init+0x1e4>
 8001dea:	2305      	movs	r3, #5
 8001dec:	e004      	b.n	8001df8 <HAL_GPIO_Init+0x1e4>
 8001dee:	2302      	movs	r3, #2
 8001df0:	e002      	b.n	8001df8 <HAL_GPIO_Init+0x1e4>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_GPIO_Init+0x1e4>
 8001df6:	2300      	movs	r3, #0
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	2103      	movs	r1, #3
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	0092      	lsls	r2, r2, #2
 8001e00:	4093      	lsls	r3, r2
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e08:	4935      	ldr	r1, [pc, #212]	@ (8001ee0 <HAL_GPIO_Init+0x2cc>)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	3302      	adds	r3, #2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e16:	4b36      	ldr	r3, [pc, #216]	@ (8001ef0 <HAL_GPIO_Init+0x2dc>)
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685a      	ldr	r2, [r3, #4]
 8001e2a:	2380      	movs	r3, #128	@ 0x80
 8001e2c:	035b      	lsls	r3, r3, #13
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef0 <HAL_GPIO_Init+0x2dc>)
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001e40:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef0 <HAL_GPIO_Init+0x2dc>)
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	43da      	mvns	r2, r3
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	2380      	movs	r3, #128	@ 0x80
 8001e56:	039b      	lsls	r3, r3, #14
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e64:	4b22      	ldr	r3, [pc, #136]	@ (8001ef0 <HAL_GPIO_Init+0x2dc>)
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001e6a:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <HAL_GPIO_Init+0x2dc>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	43da      	mvns	r2, r3
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	2380      	movs	r3, #128	@ 0x80
 8001e80:	029b      	lsls	r3, r3, #10
 8001e82:	4013      	ands	r3, r2
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e8e:	4b18      	ldr	r3, [pc, #96]	@ (8001ef0 <HAL_GPIO_Init+0x2dc>)
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001e94:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <HAL_GPIO_Init+0x2dc>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	43da      	mvns	r2, r3
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	2380      	movs	r3, #128	@ 0x80
 8001eaa:	025b      	lsls	r3, r3, #9
 8001eac:	4013      	ands	r3, r2
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <HAL_GPIO_Init+0x2dc>)
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	40da      	lsrs	r2, r3
 8001ecc:	1e13      	subs	r3, r2, #0
 8001ece:	d000      	beq.n	8001ed2 <HAL_GPIO_Init+0x2be>
 8001ed0:	e6a8      	b.n	8001c24 <HAL_GPIO_Init+0x10>
  } 
}
 8001ed2:	46c0      	nop			@ (mov r8, r8)
 8001ed4:	46c0      	nop			@ (mov r8, r8)
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	b006      	add	sp, #24
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40010000 	.word	0x40010000
 8001ee4:	48000400 	.word	0x48000400
 8001ee8:	48000800 	.word	0x48000800
 8001eec:	48000c00 	.word	0x48000c00
 8001ef0:	40010400 	.word	0x40010400

08001ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	0008      	movs	r0, r1
 8001efe:	0011      	movs	r1, r2
 8001f00:	1cbb      	adds	r3, r7, #2
 8001f02:	1c02      	adds	r2, r0, #0
 8001f04:	801a      	strh	r2, [r3, #0]
 8001f06:	1c7b      	adds	r3, r7, #1
 8001f08:	1c0a      	adds	r2, r1, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f0c:	1c7b      	adds	r3, r7, #1
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d004      	beq.n	8001f1e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f14:	1cbb      	adds	r3, r7, #2
 8001f16:	881a      	ldrh	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f1c:	e003      	b.n	8001f26 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f1e:	1cbb      	adds	r3, r7, #2
 8001f20:	881a      	ldrh	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f26:	46c0      	nop			@ (mov r8, r8)
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b002      	add	sp, #8
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	0002      	movs	r2, r0
 8001f38:	1dbb      	adds	r3, r7, #6
 8001f3a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f3c:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	1dba      	adds	r2, r7, #6
 8001f42:	8812      	ldrh	r2, [r2, #0]
 8001f44:	4013      	ands	r3, r2
 8001f46:	d008      	beq.n	8001f5a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f48:	4b06      	ldr	r3, [pc, #24]	@ (8001f64 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001f4a:	1dba      	adds	r2, r7, #6
 8001f4c:	8812      	ldrh	r2, [r2, #0]
 8001f4e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f50:	1dbb      	adds	r3, r7, #6
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7fe fa7f 	bl	8000458 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b002      	add	sp, #8
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	40010400 	.word	0x40010400

08001f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e301      	b.n	800257e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4013      	ands	r3, r2
 8001f82:	d100      	bne.n	8001f86 <HAL_RCC_OscConfig+0x1e>
 8001f84:	e08d      	b.n	80020a2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f86:	4bc3      	ldr	r3, [pc, #780]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	220c      	movs	r2, #12
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	d00e      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f92:	4bc0      	ldr	r3, [pc, #768]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	220c      	movs	r2, #12
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d116      	bne.n	8001fcc <HAL_RCC_OscConfig+0x64>
 8001f9e:	4bbd      	ldr	r3, [pc, #756]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	2380      	movs	r3, #128	@ 0x80
 8001fa4:	025b      	lsls	r3, r3, #9
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	2380      	movs	r3, #128	@ 0x80
 8001faa:	025b      	lsls	r3, r3, #9
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d10d      	bne.n	8001fcc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb0:	4bb8      	ldr	r3, [pc, #736]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2380      	movs	r3, #128	@ 0x80
 8001fb6:	029b      	lsls	r3, r3, #10
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d100      	bne.n	8001fbe <HAL_RCC_OscConfig+0x56>
 8001fbc:	e070      	b.n	80020a0 <HAL_RCC_OscConfig+0x138>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d000      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x60>
 8001fc6:	e06b      	b.n	80020a0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e2d8      	b.n	800257e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d107      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x7c>
 8001fd4:	4baf      	ldr	r3, [pc, #700]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4bae      	ldr	r3, [pc, #696]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8001fda:	2180      	movs	r1, #128	@ 0x80
 8001fdc:	0249      	lsls	r1, r1, #9
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e02f      	b.n	8002044 <HAL_RCC_OscConfig+0xdc>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10c      	bne.n	8002006 <HAL_RCC_OscConfig+0x9e>
 8001fec:	4ba9      	ldr	r3, [pc, #676]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4ba8      	ldr	r3, [pc, #672]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8001ff2:	49a9      	ldr	r1, [pc, #676]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	4ba6      	ldr	r3, [pc, #664]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4ba5      	ldr	r3, [pc, #660]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8001ffe:	49a7      	ldr	r1, [pc, #668]	@ (800229c <HAL_RCC_OscConfig+0x334>)
 8002000:	400a      	ands	r2, r1
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	e01e      	b.n	8002044 <HAL_RCC_OscConfig+0xdc>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b05      	cmp	r3, #5
 800200c:	d10e      	bne.n	800202c <HAL_RCC_OscConfig+0xc4>
 800200e:	4ba1      	ldr	r3, [pc, #644]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4ba0      	ldr	r3, [pc, #640]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8002014:	2180      	movs	r1, #128	@ 0x80
 8002016:	02c9      	lsls	r1, r1, #11
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	4b9d      	ldr	r3, [pc, #628]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	4b9c      	ldr	r3, [pc, #624]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8002022:	2180      	movs	r1, #128	@ 0x80
 8002024:	0249      	lsls	r1, r1, #9
 8002026:	430a      	orrs	r2, r1
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	e00b      	b.n	8002044 <HAL_RCC_OscConfig+0xdc>
 800202c:	4b99      	ldr	r3, [pc, #612]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b98      	ldr	r3, [pc, #608]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8002032:	4999      	ldr	r1, [pc, #612]	@ (8002298 <HAL_RCC_OscConfig+0x330>)
 8002034:	400a      	ands	r2, r1
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	4b96      	ldr	r3, [pc, #600]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	4b95      	ldr	r3, [pc, #596]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 800203e:	4997      	ldr	r1, [pc, #604]	@ (800229c <HAL_RCC_OscConfig+0x334>)
 8002040:	400a      	ands	r2, r1
 8002042:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d014      	beq.n	8002076 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7fe fee2 	bl	8000e14 <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002056:	f7fe fedd 	bl	8000e14 <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b64      	cmp	r3, #100	@ 0x64
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e28a      	b.n	800257e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002068:	4b8a      	ldr	r3, [pc, #552]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	2380      	movs	r3, #128	@ 0x80
 800206e:	029b      	lsls	r3, r3, #10
 8002070:	4013      	ands	r3, r2
 8002072:	d0f0      	beq.n	8002056 <HAL_RCC_OscConfig+0xee>
 8002074:	e015      	b.n	80020a2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7fe fecd 	bl	8000e14 <HAL_GetTick>
 800207a:	0003      	movs	r3, r0
 800207c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002080:	f7fe fec8 	bl	8000e14 <HAL_GetTick>
 8002084:	0002      	movs	r2, r0
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	@ 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e275      	b.n	800257e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	4b80      	ldr	r3, [pc, #512]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	2380      	movs	r3, #128	@ 0x80
 8002098:	029b      	lsls	r3, r3, #10
 800209a:	4013      	ands	r3, r2
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x118>
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2202      	movs	r2, #2
 80020a8:	4013      	ands	r3, r2
 80020aa:	d100      	bne.n	80020ae <HAL_RCC_OscConfig+0x146>
 80020ac:	e069      	b.n	8002182 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020ae:	4b79      	ldr	r3, [pc, #484]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	220c      	movs	r2, #12
 80020b4:	4013      	ands	r3, r2
 80020b6:	d00b      	beq.n	80020d0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020b8:	4b76      	ldr	r3, [pc, #472]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	220c      	movs	r2, #12
 80020be:	4013      	ands	r3, r2
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	d11c      	bne.n	80020fe <HAL_RCC_OscConfig+0x196>
 80020c4:	4b73      	ldr	r3, [pc, #460]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	2380      	movs	r3, #128	@ 0x80
 80020ca:	025b      	lsls	r3, r3, #9
 80020cc:	4013      	ands	r3, r2
 80020ce:	d116      	bne.n	80020fe <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d0:	4b70      	ldr	r3, [pc, #448]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2202      	movs	r2, #2
 80020d6:	4013      	ands	r3, r2
 80020d8:	d005      	beq.n	80020e6 <HAL_RCC_OscConfig+0x17e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d001      	beq.n	80020e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e24b      	b.n	800257e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e6:	4b6b      	ldr	r3, [pc, #428]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	22f8      	movs	r2, #248	@ 0xf8
 80020ec:	4393      	bics	r3, r2
 80020ee:	0019      	movs	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	00da      	lsls	r2, r3, #3
 80020f6:	4b67      	ldr	r3, [pc, #412]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 80020f8:	430a      	orrs	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fc:	e041      	b.n	8002182 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d024      	beq.n	8002150 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002106:	4b63      	ldr	r3, [pc, #396]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	4b62      	ldr	r3, [pc, #392]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 800210c:	2101      	movs	r1, #1
 800210e:	430a      	orrs	r2, r1
 8002110:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002112:	f7fe fe7f 	bl	8000e14 <HAL_GetTick>
 8002116:	0003      	movs	r3, r0
 8002118:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800211c:	f7fe fe7a 	bl	8000e14 <HAL_GetTick>
 8002120:	0002      	movs	r2, r0
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e227      	b.n	800257e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212e:	4b59      	ldr	r3, [pc, #356]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2202      	movs	r2, #2
 8002134:	4013      	ands	r3, r2
 8002136:	d0f1      	beq.n	800211c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002138:	4b56      	ldr	r3, [pc, #344]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	22f8      	movs	r2, #248	@ 0xf8
 800213e:	4393      	bics	r3, r2
 8002140:	0019      	movs	r1, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	00da      	lsls	r2, r3, #3
 8002148:	4b52      	ldr	r3, [pc, #328]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 800214a:	430a      	orrs	r2, r1
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	e018      	b.n	8002182 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002150:	4b50      	ldr	r3, [pc, #320]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b4f      	ldr	r3, [pc, #316]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8002156:	2101      	movs	r1, #1
 8002158:	438a      	bics	r2, r1
 800215a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215c:	f7fe fe5a 	bl	8000e14 <HAL_GetTick>
 8002160:	0003      	movs	r3, r0
 8002162:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002166:	f7fe fe55 	bl	8000e14 <HAL_GetTick>
 800216a:	0002      	movs	r2, r0
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e202      	b.n	800257e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002178:	4b46      	ldr	r3, [pc, #280]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2202      	movs	r2, #2
 800217e:	4013      	ands	r3, r2
 8002180:	d1f1      	bne.n	8002166 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2208      	movs	r2, #8
 8002188:	4013      	ands	r3, r2
 800218a:	d036      	beq.n	80021fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69db      	ldr	r3, [r3, #28]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d019      	beq.n	80021c8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002194:	4b3f      	ldr	r3, [pc, #252]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8002196:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002198:	4b3e      	ldr	r3, [pc, #248]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 800219a:	2101      	movs	r1, #1
 800219c:	430a      	orrs	r2, r1
 800219e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a0:	f7fe fe38 	bl	8000e14 <HAL_GetTick>
 80021a4:	0003      	movs	r3, r0
 80021a6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021aa:	f7fe fe33 	bl	8000e14 <HAL_GetTick>
 80021ae:	0002      	movs	r2, r0
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e1e0      	b.n	800257e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021bc:	4b35      	ldr	r3, [pc, #212]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 80021be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c0:	2202      	movs	r2, #2
 80021c2:	4013      	ands	r3, r2
 80021c4:	d0f1      	beq.n	80021aa <HAL_RCC_OscConfig+0x242>
 80021c6:	e018      	b.n	80021fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021c8:	4b32      	ldr	r3, [pc, #200]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 80021ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021cc:	4b31      	ldr	r3, [pc, #196]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 80021ce:	2101      	movs	r1, #1
 80021d0:	438a      	bics	r2, r1
 80021d2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d4:	f7fe fe1e 	bl	8000e14 <HAL_GetTick>
 80021d8:	0003      	movs	r3, r0
 80021da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021de:	f7fe fe19 	bl	8000e14 <HAL_GetTick>
 80021e2:	0002      	movs	r2, r0
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e1c6      	b.n	800257e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f0:	4b28      	ldr	r3, [pc, #160]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	2202      	movs	r2, #2
 80021f6:	4013      	ands	r3, r2
 80021f8:	d1f1      	bne.n	80021de <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2204      	movs	r2, #4
 8002200:	4013      	ands	r3, r2
 8002202:	d100      	bne.n	8002206 <HAL_RCC_OscConfig+0x29e>
 8002204:	e0b4      	b.n	8002370 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002206:	201f      	movs	r0, #31
 8002208:	183b      	adds	r3, r7, r0
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220e:	4b21      	ldr	r3, [pc, #132]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8002210:	69da      	ldr	r2, [r3, #28]
 8002212:	2380      	movs	r3, #128	@ 0x80
 8002214:	055b      	lsls	r3, r3, #21
 8002216:	4013      	ands	r3, r2
 8002218:	d110      	bne.n	800223c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221a:	4b1e      	ldr	r3, [pc, #120]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 800221c:	69da      	ldr	r2, [r3, #28]
 800221e:	4b1d      	ldr	r3, [pc, #116]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8002220:	2180      	movs	r1, #128	@ 0x80
 8002222:	0549      	lsls	r1, r1, #21
 8002224:	430a      	orrs	r2, r1
 8002226:	61da      	str	r2, [r3, #28]
 8002228:	4b1a      	ldr	r3, [pc, #104]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 800222a:	69da      	ldr	r2, [r3, #28]
 800222c:	2380      	movs	r3, #128	@ 0x80
 800222e:	055b      	lsls	r3, r3, #21
 8002230:	4013      	ands	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002236:	183b      	adds	r3, r7, r0
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223c:	4b18      	ldr	r3, [pc, #96]	@ (80022a0 <HAL_RCC_OscConfig+0x338>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	2380      	movs	r3, #128	@ 0x80
 8002242:	005b      	lsls	r3, r3, #1
 8002244:	4013      	ands	r3, r2
 8002246:	d11a      	bne.n	800227e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002248:	4b15      	ldr	r3, [pc, #84]	@ (80022a0 <HAL_RCC_OscConfig+0x338>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b14      	ldr	r3, [pc, #80]	@ (80022a0 <HAL_RCC_OscConfig+0x338>)
 800224e:	2180      	movs	r1, #128	@ 0x80
 8002250:	0049      	lsls	r1, r1, #1
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002256:	f7fe fddd 	bl	8000e14 <HAL_GetTick>
 800225a:	0003      	movs	r3, r0
 800225c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002260:	f7fe fdd8 	bl	8000e14 <HAL_GetTick>
 8002264:	0002      	movs	r2, r0
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b64      	cmp	r3, #100	@ 0x64
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e185      	b.n	800257e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002272:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <HAL_RCC_OscConfig+0x338>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	2380      	movs	r3, #128	@ 0x80
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4013      	ands	r3, r2
 800227c:	d0f0      	beq.n	8002260 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d10e      	bne.n	80022a4 <HAL_RCC_OscConfig+0x33c>
 8002286:	4b03      	ldr	r3, [pc, #12]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 8002288:	6a1a      	ldr	r2, [r3, #32]
 800228a:	4b02      	ldr	r3, [pc, #8]	@ (8002294 <HAL_RCC_OscConfig+0x32c>)
 800228c:	2101      	movs	r1, #1
 800228e:	430a      	orrs	r2, r1
 8002290:	621a      	str	r2, [r3, #32]
 8002292:	e035      	b.n	8002300 <HAL_RCC_OscConfig+0x398>
 8002294:	40021000 	.word	0x40021000
 8002298:	fffeffff 	.word	0xfffeffff
 800229c:	fffbffff 	.word	0xfffbffff
 80022a0:	40007000 	.word	0x40007000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10c      	bne.n	80022c6 <HAL_RCC_OscConfig+0x35e>
 80022ac:	4bb6      	ldr	r3, [pc, #728]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80022ae:	6a1a      	ldr	r2, [r3, #32]
 80022b0:	4bb5      	ldr	r3, [pc, #724]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80022b2:	2101      	movs	r1, #1
 80022b4:	438a      	bics	r2, r1
 80022b6:	621a      	str	r2, [r3, #32]
 80022b8:	4bb3      	ldr	r3, [pc, #716]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80022ba:	6a1a      	ldr	r2, [r3, #32]
 80022bc:	4bb2      	ldr	r3, [pc, #712]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80022be:	2104      	movs	r1, #4
 80022c0:	438a      	bics	r2, r1
 80022c2:	621a      	str	r2, [r3, #32]
 80022c4:	e01c      	b.n	8002300 <HAL_RCC_OscConfig+0x398>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b05      	cmp	r3, #5
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x380>
 80022ce:	4bae      	ldr	r3, [pc, #696]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80022d0:	6a1a      	ldr	r2, [r3, #32]
 80022d2:	4bad      	ldr	r3, [pc, #692]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80022d4:	2104      	movs	r1, #4
 80022d6:	430a      	orrs	r2, r1
 80022d8:	621a      	str	r2, [r3, #32]
 80022da:	4bab      	ldr	r3, [pc, #684]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80022dc:	6a1a      	ldr	r2, [r3, #32]
 80022de:	4baa      	ldr	r3, [pc, #680]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80022e0:	2101      	movs	r1, #1
 80022e2:	430a      	orrs	r2, r1
 80022e4:	621a      	str	r2, [r3, #32]
 80022e6:	e00b      	b.n	8002300 <HAL_RCC_OscConfig+0x398>
 80022e8:	4ba7      	ldr	r3, [pc, #668]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80022ea:	6a1a      	ldr	r2, [r3, #32]
 80022ec:	4ba6      	ldr	r3, [pc, #664]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80022ee:	2101      	movs	r1, #1
 80022f0:	438a      	bics	r2, r1
 80022f2:	621a      	str	r2, [r3, #32]
 80022f4:	4ba4      	ldr	r3, [pc, #656]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80022f6:	6a1a      	ldr	r2, [r3, #32]
 80022f8:	4ba3      	ldr	r3, [pc, #652]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80022fa:	2104      	movs	r1, #4
 80022fc:	438a      	bics	r2, r1
 80022fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d014      	beq.n	8002332 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002308:	f7fe fd84 	bl	8000e14 <HAL_GetTick>
 800230c:	0003      	movs	r3, r0
 800230e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002310:	e009      	b.n	8002326 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002312:	f7fe fd7f 	bl	8000e14 <HAL_GetTick>
 8002316:	0002      	movs	r2, r0
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	4a9b      	ldr	r2, [pc, #620]	@ (800258c <HAL_RCC_OscConfig+0x624>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e12b      	b.n	800257e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002326:	4b98      	ldr	r3, [pc, #608]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	2202      	movs	r2, #2
 800232c:	4013      	ands	r3, r2
 800232e:	d0f0      	beq.n	8002312 <HAL_RCC_OscConfig+0x3aa>
 8002330:	e013      	b.n	800235a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002332:	f7fe fd6f 	bl	8000e14 <HAL_GetTick>
 8002336:	0003      	movs	r3, r0
 8002338:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800233a:	e009      	b.n	8002350 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233c:	f7fe fd6a 	bl	8000e14 <HAL_GetTick>
 8002340:	0002      	movs	r2, r0
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	4a91      	ldr	r2, [pc, #580]	@ (800258c <HAL_RCC_OscConfig+0x624>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e116      	b.n	800257e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002350:	4b8d      	ldr	r3, [pc, #564]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	2202      	movs	r2, #2
 8002356:	4013      	ands	r3, r2
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800235a:	231f      	movs	r3, #31
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d105      	bne.n	8002370 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002364:	4b88      	ldr	r3, [pc, #544]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 8002366:	69da      	ldr	r2, [r3, #28]
 8002368:	4b87      	ldr	r3, [pc, #540]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 800236a:	4989      	ldr	r1, [pc, #548]	@ (8002590 <HAL_RCC_OscConfig+0x628>)
 800236c:	400a      	ands	r2, r1
 800236e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2210      	movs	r2, #16
 8002376:	4013      	ands	r3, r2
 8002378:	d063      	beq.n	8002442 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d12a      	bne.n	80023d8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002382:	4b81      	ldr	r3, [pc, #516]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 8002384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002386:	4b80      	ldr	r3, [pc, #512]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 8002388:	2104      	movs	r1, #4
 800238a:	430a      	orrs	r2, r1
 800238c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800238e:	4b7e      	ldr	r3, [pc, #504]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 8002390:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002392:	4b7d      	ldr	r3, [pc, #500]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 8002394:	2101      	movs	r1, #1
 8002396:	430a      	orrs	r2, r1
 8002398:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239a:	f7fe fd3b 	bl	8000e14 <HAL_GetTick>
 800239e:	0003      	movs	r3, r0
 80023a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023a4:	f7fe fd36 	bl	8000e14 <HAL_GetTick>
 80023a8:	0002      	movs	r2, r0
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e0e3      	b.n	800257e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80023b6:	4b74      	ldr	r3, [pc, #464]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80023b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023ba:	2202      	movs	r2, #2
 80023bc:	4013      	ands	r3, r2
 80023be:	d0f1      	beq.n	80023a4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023c0:	4b71      	ldr	r3, [pc, #452]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80023c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c4:	22f8      	movs	r2, #248	@ 0xf8
 80023c6:	4393      	bics	r3, r2
 80023c8:	0019      	movs	r1, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	00da      	lsls	r2, r3, #3
 80023d0:	4b6d      	ldr	r3, [pc, #436]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80023d2:	430a      	orrs	r2, r1
 80023d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80023d6:	e034      	b.n	8002442 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	3305      	adds	r3, #5
 80023de:	d111      	bne.n	8002404 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80023e0:	4b69      	ldr	r3, [pc, #420]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80023e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023e4:	4b68      	ldr	r3, [pc, #416]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80023e6:	2104      	movs	r1, #4
 80023e8:	438a      	bics	r2, r1
 80023ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023ec:	4b66      	ldr	r3, [pc, #408]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80023ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023f0:	22f8      	movs	r2, #248	@ 0xf8
 80023f2:	4393      	bics	r3, r2
 80023f4:	0019      	movs	r1, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	00da      	lsls	r2, r3, #3
 80023fc:	4b62      	ldr	r3, [pc, #392]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80023fe:	430a      	orrs	r2, r1
 8002400:	635a      	str	r2, [r3, #52]	@ 0x34
 8002402:	e01e      	b.n	8002442 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002404:	4b60      	ldr	r3, [pc, #384]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 8002406:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002408:	4b5f      	ldr	r3, [pc, #380]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 800240a:	2104      	movs	r1, #4
 800240c:	430a      	orrs	r2, r1
 800240e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002410:	4b5d      	ldr	r3, [pc, #372]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 8002412:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002414:	4b5c      	ldr	r3, [pc, #368]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 8002416:	2101      	movs	r1, #1
 8002418:	438a      	bics	r2, r1
 800241a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241c:	f7fe fcfa 	bl	8000e14 <HAL_GetTick>
 8002420:	0003      	movs	r3, r0
 8002422:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002426:	f7fe fcf5 	bl	8000e14 <HAL_GetTick>
 800242a:	0002      	movs	r2, r0
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e0a2      	b.n	800257e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002438:	4b53      	ldr	r3, [pc, #332]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 800243a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800243c:	2202      	movs	r2, #2
 800243e:	4013      	ands	r3, r2
 8002440:	d1f1      	bne.n	8002426 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d100      	bne.n	800244c <HAL_RCC_OscConfig+0x4e4>
 800244a:	e097      	b.n	800257c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800244c:	4b4e      	ldr	r3, [pc, #312]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	220c      	movs	r2, #12
 8002452:	4013      	ands	r3, r2
 8002454:	2b08      	cmp	r3, #8
 8002456:	d100      	bne.n	800245a <HAL_RCC_OscConfig+0x4f2>
 8002458:	e06b      	b.n	8002532 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d14c      	bne.n	80024fc <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002462:	4b49      	ldr	r3, [pc, #292]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4b48      	ldr	r3, [pc, #288]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 8002468:	494a      	ldr	r1, [pc, #296]	@ (8002594 <HAL_RCC_OscConfig+0x62c>)
 800246a:	400a      	ands	r2, r1
 800246c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7fe fcd1 	bl	8000e14 <HAL_GetTick>
 8002472:	0003      	movs	r3, r0
 8002474:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002478:	f7fe fccc 	bl	8000e14 <HAL_GetTick>
 800247c:	0002      	movs	r2, r0
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e079      	b.n	800257e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248a:	4b3f      	ldr	r3, [pc, #252]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	2380      	movs	r3, #128	@ 0x80
 8002490:	049b      	lsls	r3, r3, #18
 8002492:	4013      	ands	r3, r2
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002496:	4b3c      	ldr	r3, [pc, #240]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 8002498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249a:	220f      	movs	r2, #15
 800249c:	4393      	bics	r3, r2
 800249e:	0019      	movs	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024a4:	4b38      	ldr	r3, [pc, #224]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80024a6:	430a      	orrs	r2, r1
 80024a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80024aa:	4b37      	ldr	r3, [pc, #220]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4a3a      	ldr	r2, [pc, #232]	@ (8002598 <HAL_RCC_OscConfig+0x630>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024bc:	431a      	orrs	r2, r3
 80024be:	4b32      	ldr	r3, [pc, #200]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80024c0:	430a      	orrs	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c4:	4b30      	ldr	r3, [pc, #192]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80024ca:	2180      	movs	r1, #128	@ 0x80
 80024cc:	0449      	lsls	r1, r1, #17
 80024ce:	430a      	orrs	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7fe fc9f 	bl	8000e14 <HAL_GetTick>
 80024d6:	0003      	movs	r3, r0
 80024d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024dc:	f7fe fc9a 	bl	8000e14 <HAL_GetTick>
 80024e0:	0002      	movs	r2, r0
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e047      	b.n	800257e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ee:	4b26      	ldr	r3, [pc, #152]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	2380      	movs	r3, #128	@ 0x80
 80024f4:	049b      	lsls	r3, r3, #18
 80024f6:	4013      	ands	r3, r2
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x574>
 80024fa:	e03f      	b.n	800257c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fc:	4b22      	ldr	r3, [pc, #136]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b21      	ldr	r3, [pc, #132]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 8002502:	4924      	ldr	r1, [pc, #144]	@ (8002594 <HAL_RCC_OscConfig+0x62c>)
 8002504:	400a      	ands	r2, r1
 8002506:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7fe fc84 	bl	8000e14 <HAL_GetTick>
 800250c:	0003      	movs	r3, r0
 800250e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002512:	f7fe fc7f 	bl	8000e14 <HAL_GetTick>
 8002516:	0002      	movs	r2, r0
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e02c      	b.n	800257e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002524:	4b18      	ldr	r3, [pc, #96]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	2380      	movs	r3, #128	@ 0x80
 800252a:	049b      	lsls	r3, r3, #18
 800252c:	4013      	ands	r3, r2
 800252e:	d1f0      	bne.n	8002512 <HAL_RCC_OscConfig+0x5aa>
 8002530:	e024      	b.n	800257c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e01f      	b.n	800257e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800253e:	4b12      	ldr	r3, [pc, #72]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002544:	4b10      	ldr	r3, [pc, #64]	@ (8002588 <HAL_RCC_OscConfig+0x620>)
 8002546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002548:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	2380      	movs	r3, #128	@ 0x80
 800254e:	025b      	lsls	r3, r3, #9
 8002550:	401a      	ands	r2, r3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	429a      	cmp	r2, r3
 8002558:	d10e      	bne.n	8002578 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	220f      	movs	r2, #15
 800255e:	401a      	ands	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002564:	429a      	cmp	r2, r3
 8002566:	d107      	bne.n	8002578 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	23f0      	movs	r3, #240	@ 0xf0
 800256c:	039b      	lsls	r3, r3, #14
 800256e:	401a      	ands	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b008      	add	sp, #32
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			@ (mov r8, r8)
 8002588:	40021000 	.word	0x40021000
 800258c:	00001388 	.word	0x00001388
 8002590:	efffffff 	.word	0xefffffff
 8002594:	feffffff 	.word	0xfeffffff
 8002598:	ffc2ffff 	.word	0xffc2ffff

0800259c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0b3      	b.n	8002718 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b0:	4b5b      	ldr	r3, [pc, #364]	@ (8002720 <HAL_RCC_ClockConfig+0x184>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2201      	movs	r2, #1
 80025b6:	4013      	ands	r3, r2
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d911      	bls.n	80025e2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b58      	ldr	r3, [pc, #352]	@ (8002720 <HAL_RCC_ClockConfig+0x184>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2201      	movs	r2, #1
 80025c4:	4393      	bics	r3, r2
 80025c6:	0019      	movs	r1, r3
 80025c8:	4b55      	ldr	r3, [pc, #340]	@ (8002720 <HAL_RCC_ClockConfig+0x184>)
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d0:	4b53      	ldr	r3, [pc, #332]	@ (8002720 <HAL_RCC_ClockConfig+0x184>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2201      	movs	r2, #1
 80025d6:	4013      	ands	r3, r2
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d001      	beq.n	80025e2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e09a      	b.n	8002718 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2202      	movs	r2, #2
 80025e8:	4013      	ands	r3, r2
 80025ea:	d015      	beq.n	8002618 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2204      	movs	r2, #4
 80025f2:	4013      	ands	r3, r2
 80025f4:	d006      	beq.n	8002604 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002724 <HAL_RCC_ClockConfig+0x188>)
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002724 <HAL_RCC_ClockConfig+0x188>)
 80025fc:	21e0      	movs	r1, #224	@ 0xe0
 80025fe:	00c9      	lsls	r1, r1, #3
 8002600:	430a      	orrs	r2, r1
 8002602:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002604:	4b47      	ldr	r3, [pc, #284]	@ (8002724 <HAL_RCC_ClockConfig+0x188>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	22f0      	movs	r2, #240	@ 0xf0
 800260a:	4393      	bics	r3, r2
 800260c:	0019      	movs	r1, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	4b44      	ldr	r3, [pc, #272]	@ (8002724 <HAL_RCC_ClockConfig+0x188>)
 8002614:	430a      	orrs	r2, r1
 8002616:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2201      	movs	r2, #1
 800261e:	4013      	ands	r3, r2
 8002620:	d040      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d107      	bne.n	800263a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	4b3e      	ldr	r3, [pc, #248]	@ (8002724 <HAL_RCC_ClockConfig+0x188>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	2380      	movs	r3, #128	@ 0x80
 8002630:	029b      	lsls	r3, r3, #10
 8002632:	4013      	ands	r3, r2
 8002634:	d114      	bne.n	8002660 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e06e      	b.n	8002718 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b02      	cmp	r3, #2
 8002640:	d107      	bne.n	8002652 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002642:	4b38      	ldr	r3, [pc, #224]	@ (8002724 <HAL_RCC_ClockConfig+0x188>)
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	2380      	movs	r3, #128	@ 0x80
 8002648:	049b      	lsls	r3, r3, #18
 800264a:	4013      	ands	r3, r2
 800264c:	d108      	bne.n	8002660 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e062      	b.n	8002718 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002652:	4b34      	ldr	r3, [pc, #208]	@ (8002724 <HAL_RCC_ClockConfig+0x188>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2202      	movs	r2, #2
 8002658:	4013      	ands	r3, r2
 800265a:	d101      	bne.n	8002660 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e05b      	b.n	8002718 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002660:	4b30      	ldr	r3, [pc, #192]	@ (8002724 <HAL_RCC_ClockConfig+0x188>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2203      	movs	r2, #3
 8002666:	4393      	bics	r3, r2
 8002668:	0019      	movs	r1, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	4b2d      	ldr	r3, [pc, #180]	@ (8002724 <HAL_RCC_ClockConfig+0x188>)
 8002670:	430a      	orrs	r2, r1
 8002672:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002674:	f7fe fbce 	bl	8000e14 <HAL_GetTick>
 8002678:	0003      	movs	r3, r0
 800267a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267c:	e009      	b.n	8002692 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267e:	f7fe fbc9 	bl	8000e14 <HAL_GetTick>
 8002682:	0002      	movs	r2, r0
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	4a27      	ldr	r2, [pc, #156]	@ (8002728 <HAL_RCC_ClockConfig+0x18c>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e042      	b.n	8002718 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002692:	4b24      	ldr	r3, [pc, #144]	@ (8002724 <HAL_RCC_ClockConfig+0x188>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	220c      	movs	r2, #12
 8002698:	401a      	ands	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d1ec      	bne.n	800267e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002720 <HAL_RCC_ClockConfig+0x184>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2201      	movs	r2, #1
 80026aa:	4013      	ands	r3, r2
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d211      	bcs.n	80026d6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002720 <HAL_RCC_ClockConfig+0x184>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2201      	movs	r2, #1
 80026b8:	4393      	bics	r3, r2
 80026ba:	0019      	movs	r1, r3
 80026bc:	4b18      	ldr	r3, [pc, #96]	@ (8002720 <HAL_RCC_ClockConfig+0x184>)
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c4:	4b16      	ldr	r3, [pc, #88]	@ (8002720 <HAL_RCC_ClockConfig+0x184>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2201      	movs	r2, #1
 80026ca:	4013      	ands	r3, r2
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d001      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e020      	b.n	8002718 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2204      	movs	r2, #4
 80026dc:	4013      	ands	r3, r2
 80026de:	d009      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026e0:	4b10      	ldr	r3, [pc, #64]	@ (8002724 <HAL_RCC_ClockConfig+0x188>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4a11      	ldr	r2, [pc, #68]	@ (800272c <HAL_RCC_ClockConfig+0x190>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	0019      	movs	r1, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002724 <HAL_RCC_ClockConfig+0x188>)
 80026f0:	430a      	orrs	r2, r1
 80026f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80026f4:	f000 f820 	bl	8002738 <HAL_RCC_GetSysClockFreq>
 80026f8:	0001      	movs	r1, r0
 80026fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002724 <HAL_RCC_ClockConfig+0x188>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	091b      	lsrs	r3, r3, #4
 8002700:	220f      	movs	r2, #15
 8002702:	4013      	ands	r3, r2
 8002704:	4a0a      	ldr	r2, [pc, #40]	@ (8002730 <HAL_RCC_ClockConfig+0x194>)
 8002706:	5cd3      	ldrb	r3, [r2, r3]
 8002708:	000a      	movs	r2, r1
 800270a:	40da      	lsrs	r2, r3
 800270c:	4b09      	ldr	r3, [pc, #36]	@ (8002734 <HAL_RCC_ClockConfig+0x198>)
 800270e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002710:	2003      	movs	r0, #3
 8002712:	f7fe fb39 	bl	8000d88 <HAL_InitTick>
  
  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	0018      	movs	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	b004      	add	sp, #16
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40022000 	.word	0x40022000
 8002724:	40021000 	.word	0x40021000
 8002728:	00001388 	.word	0x00001388
 800272c:	fffff8ff 	.word	0xfffff8ff
 8002730:	08003030 	.word	0x08003030
 8002734:	20000010 	.word	0x20000010

08002738 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	2300      	movs	r3, #0
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	2300      	movs	r3, #0
 800274c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002752:	4b20      	ldr	r3, [pc, #128]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	220c      	movs	r2, #12
 800275c:	4013      	ands	r3, r2
 800275e:	2b04      	cmp	r3, #4
 8002760:	d002      	beq.n	8002768 <HAL_RCC_GetSysClockFreq+0x30>
 8002762:	2b08      	cmp	r3, #8
 8002764:	d003      	beq.n	800276e <HAL_RCC_GetSysClockFreq+0x36>
 8002766:	e02c      	b.n	80027c2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002768:	4b1b      	ldr	r3, [pc, #108]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800276a:	613b      	str	r3, [r7, #16]
      break;
 800276c:	e02c      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	0c9b      	lsrs	r3, r3, #18
 8002772:	220f      	movs	r2, #15
 8002774:	4013      	ands	r3, r2
 8002776:	4a19      	ldr	r2, [pc, #100]	@ (80027dc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002778:	5cd3      	ldrb	r3, [r2, r3]
 800277a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800277c:	4b15      	ldr	r3, [pc, #84]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800277e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002780:	220f      	movs	r2, #15
 8002782:	4013      	ands	r3, r2
 8002784:	4a16      	ldr	r2, [pc, #88]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002786:	5cd3      	ldrb	r3, [r2, r3]
 8002788:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	2380      	movs	r3, #128	@ 0x80
 800278e:	025b      	lsls	r3, r3, #9
 8002790:	4013      	ands	r3, r2
 8002792:	d009      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	4810      	ldr	r0, [pc, #64]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002798:	f7fd fcb6 	bl	8000108 <__udivsi3>
 800279c:	0003      	movs	r3, r0
 800279e:	001a      	movs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4353      	muls	r3, r2
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	e009      	b.n	80027bc <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	000a      	movs	r2, r1
 80027ac:	0152      	lsls	r2, r2, #5
 80027ae:	1a52      	subs	r2, r2, r1
 80027b0:	0193      	lsls	r3, r2, #6
 80027b2:	1a9b      	subs	r3, r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	185b      	adds	r3, r3, r1
 80027b8:	021b      	lsls	r3, r3, #8
 80027ba:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	613b      	str	r3, [r7, #16]
      break;
 80027c0:	e002      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027c2:	4b05      	ldr	r3, [pc, #20]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027c4:	613b      	str	r3, [r7, #16]
      break;
 80027c6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027c8:	693b      	ldr	r3, [r7, #16]
}
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b006      	add	sp, #24
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			@ (mov r8, r8)
 80027d4:	40021000 	.word	0x40021000
 80027d8:	007a1200 	.word	0x007a1200
 80027dc:	08003040 	.word	0x08003040
 80027e0:	08003050 	.word	0x08003050

080027e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e042      	b.n	800287c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	223d      	movs	r2, #61	@ 0x3d
 80027fa:	5c9b      	ldrb	r3, [r3, r2]
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d107      	bne.n	8002812 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	223c      	movs	r2, #60	@ 0x3c
 8002806:	2100      	movs	r1, #0
 8002808:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	0018      	movs	r0, r3
 800280e:	f7fe f9ff 	bl	8000c10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	223d      	movs	r2, #61	@ 0x3d
 8002816:	2102      	movs	r1, #2
 8002818:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3304      	adds	r3, #4
 8002822:	0019      	movs	r1, r3
 8002824:	0010      	movs	r0, r2
 8002826:	f000 fa55 	bl	8002cd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2246      	movs	r2, #70	@ 0x46
 800282e:	2101      	movs	r1, #1
 8002830:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	223e      	movs	r2, #62	@ 0x3e
 8002836:	2101      	movs	r1, #1
 8002838:	5499      	strb	r1, [r3, r2]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	223f      	movs	r2, #63	@ 0x3f
 800283e:	2101      	movs	r1, #1
 8002840:	5499      	strb	r1, [r3, r2]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2240      	movs	r2, #64	@ 0x40
 8002846:	2101      	movs	r1, #1
 8002848:	5499      	strb	r1, [r3, r2]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2241      	movs	r2, #65	@ 0x41
 800284e:	2101      	movs	r1, #1
 8002850:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2242      	movs	r2, #66	@ 0x42
 8002856:	2101      	movs	r1, #1
 8002858:	5499      	strb	r1, [r3, r2]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2243      	movs	r2, #67	@ 0x43
 800285e:	2101      	movs	r1, #1
 8002860:	5499      	strb	r1, [r3, r2]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2244      	movs	r2, #68	@ 0x44
 8002866:	2101      	movs	r1, #1
 8002868:	5499      	strb	r1, [r3, r2]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2245      	movs	r2, #69	@ 0x45
 800286e:	2101      	movs	r1, #1
 8002870:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	223d      	movs	r2, #61	@ 0x3d
 8002876:	2101      	movs	r1, #1
 8002878:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	0018      	movs	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	b002      	add	sp, #8
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	223d      	movs	r2, #61	@ 0x3d
 8002890:	5c9b      	ldrb	r3, [r3, r2]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	2b01      	cmp	r3, #1
 8002896:	d001      	beq.n	800289c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e030      	b.n	80028fe <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	223d      	movs	r2, #61	@ 0x3d
 80028a0:	2102      	movs	r1, #2
 80028a2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2101      	movs	r1, #1
 80028b0:	430a      	orrs	r2, r1
 80028b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a13      	ldr	r2, [pc, #76]	@ (8002908 <HAL_TIM_Base_Start_IT+0x84>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d004      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0x44>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a12      	ldr	r2, [pc, #72]	@ (800290c <HAL_TIM_Base_Start_IT+0x88>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d111      	bne.n	80028ec <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2207      	movs	r2, #7
 80028d0:	4013      	ands	r3, r2
 80028d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b06      	cmp	r3, #6
 80028d8:	d010      	beq.n	80028fc <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2101      	movs	r1, #1
 80028e6:	430a      	orrs	r2, r1
 80028e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ea:	e007      	b.n	80028fc <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2101      	movs	r1, #1
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	0018      	movs	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	b004      	add	sp, #16
 8002904:	bd80      	pop	{r7, pc}
 8002906:	46c0      	nop			@ (mov r8, r8)
 8002908:	40012c00 	.word	0x40012c00
 800290c:	40000400 	.word	0x40000400

08002910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2202      	movs	r2, #2
 800292c:	4013      	ands	r3, r2
 800292e:	d021      	beq.n	8002974 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2202      	movs	r2, #2
 8002934:	4013      	ands	r3, r2
 8002936:	d01d      	beq.n	8002974 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2203      	movs	r2, #3
 800293e:	4252      	negs	r2, r2
 8002940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2203      	movs	r2, #3
 8002950:	4013      	ands	r3, r2
 8002952:	d004      	beq.n	800295e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	0018      	movs	r0, r3
 8002958:	f000 f9a4 	bl	8002ca4 <HAL_TIM_IC_CaptureCallback>
 800295c:	e007      	b.n	800296e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	0018      	movs	r0, r3
 8002962:	f000 f997 	bl	8002c94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	0018      	movs	r0, r3
 800296a:	f000 f9a3 	bl	8002cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2204      	movs	r2, #4
 8002978:	4013      	ands	r3, r2
 800297a:	d022      	beq.n	80029c2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2204      	movs	r2, #4
 8002980:	4013      	ands	r3, r2
 8002982:	d01e      	beq.n	80029c2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2205      	movs	r2, #5
 800298a:	4252      	negs	r2, r2
 800298c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2202      	movs	r2, #2
 8002992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	23c0      	movs	r3, #192	@ 0xc0
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4013      	ands	r3, r2
 80029a0:	d004      	beq.n	80029ac <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	0018      	movs	r0, r3
 80029a6:	f000 f97d 	bl	8002ca4 <HAL_TIM_IC_CaptureCallback>
 80029aa:	e007      	b.n	80029bc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	0018      	movs	r0, r3
 80029b0:	f000 f970 	bl	8002c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	0018      	movs	r0, r3
 80029b8:	f000 f97c 	bl	8002cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2208      	movs	r2, #8
 80029c6:	4013      	ands	r3, r2
 80029c8:	d021      	beq.n	8002a0e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2208      	movs	r2, #8
 80029ce:	4013      	ands	r3, r2
 80029d0:	d01d      	beq.n	8002a0e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2209      	movs	r2, #9
 80029d8:	4252      	negs	r2, r2
 80029da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2204      	movs	r2, #4
 80029e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	2203      	movs	r2, #3
 80029ea:	4013      	ands	r3, r2
 80029ec:	d004      	beq.n	80029f8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	0018      	movs	r0, r3
 80029f2:	f000 f957 	bl	8002ca4 <HAL_TIM_IC_CaptureCallback>
 80029f6:	e007      	b.n	8002a08 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 f94a 	bl	8002c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	0018      	movs	r0, r3
 8002a04:	f000 f956 	bl	8002cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2210      	movs	r2, #16
 8002a12:	4013      	ands	r3, r2
 8002a14:	d022      	beq.n	8002a5c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2210      	movs	r2, #16
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d01e      	beq.n	8002a5c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2211      	movs	r2, #17
 8002a24:	4252      	negs	r2, r2
 8002a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2208      	movs	r2, #8
 8002a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69da      	ldr	r2, [r3, #28]
 8002a34:	23c0      	movs	r3, #192	@ 0xc0
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d004      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 f930 	bl	8002ca4 <HAL_TIM_IC_CaptureCallback>
 8002a44:	e007      	b.n	8002a56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f000 f923 	bl	8002c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 f92f 	bl	8002cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	4013      	ands	r3, r2
 8002a62:	d00c      	beq.n	8002a7e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d008      	beq.n	8002a7e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2202      	movs	r2, #2
 8002a72:	4252      	negs	r2, r2
 8002a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f7fd fd3f 	bl	80004fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2280      	movs	r2, #128	@ 0x80
 8002a82:	4013      	ands	r3, r2
 8002a84:	d00c      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2280      	movs	r2, #128	@ 0x80
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d008      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2281      	movs	r2, #129	@ 0x81
 8002a94:	4252      	negs	r2, r2
 8002a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f000 fa88 	bl	8002fb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2240      	movs	r2, #64	@ 0x40
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d00c      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2240      	movs	r2, #64	@ 0x40
 8002aac:	4013      	ands	r3, r2
 8002aae:	d008      	beq.n	8002ac2 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2241      	movs	r2, #65	@ 0x41
 8002ab6:	4252      	negs	r2, r2
 8002ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	0018      	movs	r0, r3
 8002abe:	f000 f901 	bl	8002cc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d00c      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2220      	movs	r2, #32
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d008      	beq.n	8002ae4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2221      	movs	r2, #33	@ 0x21
 8002ad8:	4252      	negs	r2, r2
 8002ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f000 fa5e 	bl	8002fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ae4:	46c0      	nop			@ (mov r8, r8)
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	b004      	add	sp, #16
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002af6:	230f      	movs	r3, #15
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	223c      	movs	r2, #60	@ 0x3c
 8002b02:	5c9b      	ldrb	r3, [r3, r2]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_TIM_ConfigClockSource+0x20>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e0bc      	b.n	8002c86 <HAL_TIM_ConfigClockSource+0x19a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	223c      	movs	r2, #60	@ 0x3c
 8002b10:	2101      	movs	r1, #1
 8002b12:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	223d      	movs	r2, #61	@ 0x3d
 8002b18:	2102      	movs	r1, #2
 8002b1a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2277      	movs	r2, #119	@ 0x77
 8002b28:	4393      	bics	r3, r2
 8002b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4a58      	ldr	r2, [pc, #352]	@ (8002c90 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2280      	movs	r2, #128	@ 0x80
 8002b42:	0192      	lsls	r2, r2, #6
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d040      	beq.n	8002bca <HAL_TIM_ConfigClockSource+0xde>
 8002b48:	2280      	movs	r2, #128	@ 0x80
 8002b4a:	0192      	lsls	r2, r2, #6
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d900      	bls.n	8002b52 <HAL_TIM_ConfigClockSource+0x66>
 8002b50:	e088      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x178>
 8002b52:	2280      	movs	r2, #128	@ 0x80
 8002b54:	0152      	lsls	r2, r2, #5
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d100      	bne.n	8002b5c <HAL_TIM_ConfigClockSource+0x70>
 8002b5a:	e088      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x182>
 8002b5c:	2280      	movs	r2, #128	@ 0x80
 8002b5e:	0152      	lsls	r2, r2, #5
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d900      	bls.n	8002b66 <HAL_TIM_ConfigClockSource+0x7a>
 8002b64:	e07e      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x178>
 8002b66:	2b70      	cmp	r3, #112	@ 0x70
 8002b68:	d018      	beq.n	8002b9c <HAL_TIM_ConfigClockSource+0xb0>
 8002b6a:	d900      	bls.n	8002b6e <HAL_TIM_ConfigClockSource+0x82>
 8002b6c:	e07a      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x178>
 8002b6e:	2b60      	cmp	r3, #96	@ 0x60
 8002b70:	d04f      	beq.n	8002c12 <HAL_TIM_ConfigClockSource+0x126>
 8002b72:	d900      	bls.n	8002b76 <HAL_TIM_ConfigClockSource+0x8a>
 8002b74:	e076      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x178>
 8002b76:	2b50      	cmp	r3, #80	@ 0x50
 8002b78:	d03b      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0x106>
 8002b7a:	d900      	bls.n	8002b7e <HAL_TIM_ConfigClockSource+0x92>
 8002b7c:	e072      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x178>
 8002b7e:	2b40      	cmp	r3, #64	@ 0x40
 8002b80:	d057      	beq.n	8002c32 <HAL_TIM_ConfigClockSource+0x146>
 8002b82:	d900      	bls.n	8002b86 <HAL_TIM_ConfigClockSource+0x9a>
 8002b84:	e06e      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x178>
 8002b86:	2b30      	cmp	r3, #48	@ 0x30
 8002b88:	d063      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0x166>
 8002b8a:	d86b      	bhi.n	8002c64 <HAL_TIM_ConfigClockSource+0x178>
 8002b8c:	2b20      	cmp	r3, #32
 8002b8e:	d060      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0x166>
 8002b90:	d868      	bhi.n	8002c64 <HAL_TIM_ConfigClockSource+0x178>
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d05d      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0x166>
 8002b96:	2b10      	cmp	r3, #16
 8002b98:	d05b      	beq.n	8002c52 <HAL_TIM_ConfigClockSource+0x166>
 8002b9a:	e063      	b.n	8002c64 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bac:	f000 f986 	bl	8002ebc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2277      	movs	r2, #119	@ 0x77
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	609a      	str	r2, [r3, #8]
      break;
 8002bc8:	e052      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bda:	f000 f96f 	bl	8002ebc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2180      	movs	r1, #128	@ 0x80
 8002bea:	01c9      	lsls	r1, r1, #7
 8002bec:	430a      	orrs	r2, r1
 8002bee:	609a      	str	r2, [r3, #8]
      break;
 8002bf0:	e03e      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bfe:	001a      	movs	r2, r3
 8002c00:	f000 f8e2 	bl	8002dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2150      	movs	r1, #80	@ 0x50
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f000 f93c 	bl	8002e88 <TIM_ITRx_SetConfig>
      break;
 8002c10:	e02e      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c1e:	001a      	movs	r2, r3
 8002c20:	f000 f900 	bl	8002e24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2160      	movs	r1, #96	@ 0x60
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f000 f92c 	bl	8002e88 <TIM_ITRx_SetConfig>
      break;
 8002c30:	e01e      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c3e:	001a      	movs	r2, r3
 8002c40:	f000 f8c2 	bl	8002dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2140      	movs	r1, #64	@ 0x40
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	f000 f91c 	bl	8002e88 <TIM_ITRx_SetConfig>
      break;
 8002c50:	e00e      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	0019      	movs	r1, r3
 8002c5c:	0010      	movs	r0, r2
 8002c5e:	f000 f913 	bl	8002e88 <TIM_ITRx_SetConfig>
      break;
 8002c62:	e005      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002c64:	230f      	movs	r3, #15
 8002c66:	18fb      	adds	r3, r7, r3
 8002c68:	2201      	movs	r2, #1
 8002c6a:	701a      	strb	r2, [r3, #0]
      break;
 8002c6c:	e000      	b.n	8002c70 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002c6e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	223d      	movs	r2, #61	@ 0x3d
 8002c74:	2101      	movs	r1, #1
 8002c76:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	223c      	movs	r2, #60	@ 0x3c
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	5499      	strb	r1, [r3, r2]

  return status;
 8002c80:	230f      	movs	r3, #15
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	781b      	ldrb	r3, [r3, #0]
}
 8002c86:	0018      	movs	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b004      	add	sp, #16
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	46c0      	nop			@ (mov r8, r8)
 8002c90:	ffff00ff 	.word	0xffff00ff

08002c94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c9c:	46c0      	nop			@ (mov r8, r8)
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b002      	add	sp, #8
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cac:	46c0      	nop			@ (mov r8, r8)
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b002      	add	sp, #8
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cbc:	46c0      	nop			@ (mov r8, r8)
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b002      	add	sp, #8
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ccc:	46c0      	nop			@ (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b002      	add	sp, #8
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a32      	ldr	r2, [pc, #200]	@ (8002db0 <TIM_Base_SetConfig+0xdc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d003      	beq.n	8002cf4 <TIM_Base_SetConfig+0x20>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a31      	ldr	r2, [pc, #196]	@ (8002db4 <TIM_Base_SetConfig+0xe0>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d108      	bne.n	8002d06 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2270      	movs	r2, #112	@ 0x70
 8002cf8:	4393      	bics	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a29      	ldr	r2, [pc, #164]	@ (8002db0 <TIM_Base_SetConfig+0xdc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d00f      	beq.n	8002d2e <TIM_Base_SetConfig+0x5a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a28      	ldr	r2, [pc, #160]	@ (8002db4 <TIM_Base_SetConfig+0xe0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00b      	beq.n	8002d2e <TIM_Base_SetConfig+0x5a>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a27      	ldr	r2, [pc, #156]	@ (8002db8 <TIM_Base_SetConfig+0xe4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d007      	beq.n	8002d2e <TIM_Base_SetConfig+0x5a>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a26      	ldr	r2, [pc, #152]	@ (8002dbc <TIM_Base_SetConfig+0xe8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d003      	beq.n	8002d2e <TIM_Base_SetConfig+0x5a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a25      	ldr	r2, [pc, #148]	@ (8002dc0 <TIM_Base_SetConfig+0xec>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d108      	bne.n	8002d40 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4a24      	ldr	r2, [pc, #144]	@ (8002dc4 <TIM_Base_SetConfig+0xf0>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2280      	movs	r2, #128	@ 0x80
 8002d44:	4393      	bics	r3, r2
 8002d46:	001a      	movs	r2, r3
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a11      	ldr	r2, [pc, #68]	@ (8002db0 <TIM_Base_SetConfig+0xdc>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d007      	beq.n	8002d7e <TIM_Base_SetConfig+0xaa>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a12      	ldr	r2, [pc, #72]	@ (8002dbc <TIM_Base_SetConfig+0xe8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d003      	beq.n	8002d7e <TIM_Base_SetConfig+0xaa>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a11      	ldr	r2, [pc, #68]	@ (8002dc0 <TIM_Base_SetConfig+0xec>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d103      	bne.n	8002d86 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	691a      	ldr	r2, [r3, #16]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	2201      	movs	r2, #1
 8002d92:	4013      	ands	r3, r2
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d106      	bne.n	8002da6 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	4393      	bics	r3, r2
 8002da0:	001a      	movs	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	611a      	str	r2, [r3, #16]
  }
}
 8002da6:	46c0      	nop			@ (mov r8, r8)
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b004      	add	sp, #16
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	40012c00 	.word	0x40012c00
 8002db4:	40000400 	.word	0x40000400
 8002db8:	40002000 	.word	0x40002000
 8002dbc:	40014400 	.word	0x40014400
 8002dc0:	40014800 	.word	0x40014800
 8002dc4:	fffffcff 	.word	0xfffffcff

08002dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	2201      	movs	r2, #1
 8002de0:	4393      	bics	r3, r2
 8002de2:	001a      	movs	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	22f0      	movs	r2, #240	@ 0xf0
 8002df2:	4393      	bics	r3, r2
 8002df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	220a      	movs	r2, #10
 8002e04:	4393      	bics	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	697a      	ldr	r2, [r7, #20]
 8002e1a:	621a      	str	r2, [r3, #32]
}
 8002e1c:	46c0      	nop			@ (mov r8, r8)
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b006      	add	sp, #24
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	4393      	bics	r3, r2
 8002e3e:	001a      	movs	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e84 <TIM_TI2_ConfigInputStage+0x60>)
 8002e4e:	4013      	ands	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	031b      	lsls	r3, r3, #12
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	22a0      	movs	r2, #160	@ 0xa0
 8002e60:	4393      	bics	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	621a      	str	r2, [r3, #32]
}
 8002e7a:	46c0      	nop			@ (mov r8, r8)
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	b006      	add	sp, #24
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	46c0      	nop			@ (mov r8, r8)
 8002e84:	ffff0fff 	.word	0xffff0fff

08002e88 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2270      	movs	r2, #112	@ 0x70
 8002e9c:	4393      	bics	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	2207      	movs	r2, #7
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	609a      	str	r2, [r3, #8]
}
 8002eb2:	46c0      	nop			@ (mov r8, r8)
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b004      	add	sp, #16
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
 8002ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	4a09      	ldr	r2, [pc, #36]	@ (8002ef8 <TIM_ETR_SetConfig+0x3c>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	021a      	lsls	r2, r3, #8
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	609a      	str	r2, [r3, #8]
}
 8002ef0:	46c0      	nop			@ (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b006      	add	sp, #24
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	ffff00ff 	.word	0xffff00ff

08002efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	223c      	movs	r2, #60	@ 0x3c
 8002f0a:	5c9b      	ldrb	r3, [r3, r2]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e03c      	b.n	8002f8e <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	223c      	movs	r2, #60	@ 0x3c
 8002f18:	2101      	movs	r1, #1
 8002f1a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	223d      	movs	r2, #61	@ 0x3d
 8002f20:	2102      	movs	r1, #2
 8002f22:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2270      	movs	r2, #112	@ 0x70
 8002f38:	4393      	bics	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a11      	ldr	r2, [pc, #68]	@ (8002f98 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d004      	beq.n	8002f62 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a0f      	ldr	r2, [pc, #60]	@ (8002f9c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d10c      	bne.n	8002f7c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2280      	movs	r2, #128	@ 0x80
 8002f66:	4393      	bics	r3, r2
 8002f68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	223d      	movs	r2, #61	@ 0x3d
 8002f80:	2101      	movs	r1, #1
 8002f82:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	223c      	movs	r2, #60	@ 0x3c
 8002f88:	2100      	movs	r1, #0
 8002f8a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	0018      	movs	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	b004      	add	sp, #16
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	46c0      	nop			@ (mov r8, r8)
 8002f98:	40012c00 	.word	0x40012c00
 8002f9c:	40000400 	.word	0x40000400

08002fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fa8:	46c0      	nop			@ (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b002      	add	sp, #8
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fb8:	46c0      	nop			@ (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b002      	add	sp, #8
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <memset>:
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	1882      	adds	r2, r0, r2
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d100      	bne.n	8002fca <memset+0xa>
 8002fc8:	4770      	bx	lr
 8002fca:	7019      	strb	r1, [r3, #0]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	e7f9      	b.n	8002fc4 <memset+0x4>

08002fd0 <__libc_init_array>:
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	2600      	movs	r6, #0
 8002fd4:	4c0c      	ldr	r4, [pc, #48]	@ (8003008 <__libc_init_array+0x38>)
 8002fd6:	4d0d      	ldr	r5, [pc, #52]	@ (800300c <__libc_init_array+0x3c>)
 8002fd8:	1b64      	subs	r4, r4, r5
 8002fda:	10a4      	asrs	r4, r4, #2
 8002fdc:	42a6      	cmp	r6, r4
 8002fde:	d109      	bne.n	8002ff4 <__libc_init_array+0x24>
 8002fe0:	2600      	movs	r6, #0
 8002fe2:	f000 f819 	bl	8003018 <_init>
 8002fe6:	4c0a      	ldr	r4, [pc, #40]	@ (8003010 <__libc_init_array+0x40>)
 8002fe8:	4d0a      	ldr	r5, [pc, #40]	@ (8003014 <__libc_init_array+0x44>)
 8002fea:	1b64      	subs	r4, r4, r5
 8002fec:	10a4      	asrs	r4, r4, #2
 8002fee:	42a6      	cmp	r6, r4
 8002ff0:	d105      	bne.n	8002ffe <__libc_init_array+0x2e>
 8002ff2:	bd70      	pop	{r4, r5, r6, pc}
 8002ff4:	00b3      	lsls	r3, r6, #2
 8002ff6:	58eb      	ldr	r3, [r5, r3]
 8002ff8:	4798      	blx	r3
 8002ffa:	3601      	adds	r6, #1
 8002ffc:	e7ee      	b.n	8002fdc <__libc_init_array+0xc>
 8002ffe:	00b3      	lsls	r3, r6, #2
 8003000:	58eb      	ldr	r3, [r5, r3]
 8003002:	4798      	blx	r3
 8003004:	3601      	adds	r6, #1
 8003006:	e7f2      	b.n	8002fee <__libc_init_array+0x1e>
 8003008:	08003060 	.word	0x08003060
 800300c:	08003060 	.word	0x08003060
 8003010:	08003064 	.word	0x08003064
 8003014:	08003060 	.word	0x08003060

08003018 <_init>:
 8003018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301a:	46c0      	nop			@ (mov r8, r8)
 800301c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301e:	bc08      	pop	{r3}
 8003020:	469e      	mov	lr, r3
 8003022:	4770      	bx	lr

08003024 <_fini>:
 8003024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003026:	46c0      	nop			@ (mov r8, r8)
 8003028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800302a:	bc08      	pop	{r3}
 800302c:	469e      	mov	lr, r3
 800302e:	4770      	bx	lr
